
Converter_Control_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005740  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059fc  080059fc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a04  08005a04  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a04  08005a04  00006a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000068  08005a74  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08005a74  00007430  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110de  00000000  00000000  00007096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254c  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfe  00000000  00000000  0001b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e43  00000000  00000000  0001c236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001255b  00000000  00000000  00045079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fda0f  00000000  00000000  000575d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154fe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  00155028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00159798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08005928 	.word	0x08005928

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08005928 	.word	0x08005928

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SetStepFlag>:

static volatile uint8_t errorCode = 0;

//TODO Unify setStepFlag functions in one function for readability

void SetStepFlag(void) {
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
    stepFlag = 1;
 80005d4:	4b03      	ldr	r3, [pc, #12]	@ (80005e4 <SetStepFlag+0x14>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	20000084 	.word	0x20000084

080005e8 <GetModeFlag>:
	modeFlag = mode;
}


uint8_t GetModeFlag(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
    uint8_t buf_flag = modeFlag;
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <GetModeFlag+0x1c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
    return buf_flag;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000086 	.word	0x20000086

08000608 <SetLedFlag>:


void SetLedFlag(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
    ledFlag = 1;
 800060c:	4b03      	ldr	r3, [pc, #12]	@ (800061c <SetLedFlag+0x14>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000087 	.word	0x20000087

08000620 <GetLedFlag>:


uint8_t GetLedFlag(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
    uint8_t buf_flag = ledFlag;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <GetLedFlag+0x20>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
    ledFlag = 0;
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <GetLedFlag+0x20>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
    return buf_flag;
 8000632:	79fb      	ldrb	r3, [r7, #7]
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000087 	.word	0x20000087

08000644 <GetErrorCode>:
	errorCode = 0;
}


uint8_t GetErrorCode(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
    uint8_t buf_flag = errorCode;
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <GetErrorCode+0x1c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
    return buf_flag;
 8000650:	79fb      	ldrb	r3, [r7, #7]
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000008a 	.word	0x2000008a

08000664 <SetHandlerStepFlag>:


void SetHandlerStepFlag(void) {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	handlerStepFlag = 1;
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <SetHandlerStepFlag+0x14>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000085 	.word	0x20000085

0800067c <SetDebugStepFlag>:
    uint8_t buf_flag = handlerStepFlag;
    handlerStepFlag = 0;
    return buf_flag;
}

void SetDebugStepFlag(void) {
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	debugStepFlag = 1;
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <SetDebugStepFlag+0x14>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000088 	.word	0x20000088

08000694 <GetDebugStepFlag>:


uint8_t GetDebugStepFlag(void) {
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
    uint8_t buf_flag = debugStepFlag;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <GetDebugStepFlag+0x20>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
    debugStepFlag = 0;
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <GetDebugStepFlag+0x20>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
    return buf_flag;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000088 	.word	0x20000088

080006b8 <GetPWMFlag>:
void ResetPWMFlag(void) {
	PWMFlag = 0;
}


uint8_t GetPWMFlag(void) {
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
    return PWMFlag;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <GetPWMFlag+0x14>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	20000089 	.word	0x20000089

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 ff4f 	bl	8001576 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f838 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 fad4 	bl	8000c88 <MX_GPIO_Init>
  MX_TIM6_Init();
 80006e0:	f000 f9ee 	bl	8000ac0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80006e4:	f000 fa22 	bl	8000b2c <MX_TIM7_Init>
  MX_TIM1_Init();
 80006e8:	f000 f8a0 	bl	800082c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006ec:	f000 f930 	bl	8000950 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006f0:	f000 f98a 	bl	8000a08 <MX_TIM4_Init>
  MX_TIM12_Init();
 80006f4:	f000 fa52 	bl	8000b9c <MX_TIM12_Init>
  MX_USART3_UART_Init();
 80006f8:	f000 fa96 	bl	8000c28 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  initProcess();
 80006fc:	f000 fb38 	bl	8000d70 <initProcess>

  HAL_TIM_Base_Start_IT(&htim6);
 8000700:	480d      	ldr	r0, [pc, #52]	@ (8000738 <main+0x68>)
 8000702:	f002 fc21 	bl	8002f48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000706:	480d      	ldr	r0, [pc, #52]	@ (800073c <main+0x6c>)
 8000708:	f002 fc1e 	bl	8002f48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800070c:	2108      	movs	r1, #8
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <main+0x70>)
 8000710:	f002 fcea 	bl	80030e8 <HAL_TIM_PWM_Start>
  //TIM3->CCR3 = 9830;
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000714:	2104      	movs	r1, #4
 8000716:	480b      	ldr	r0, [pc, #44]	@ (8000744 <main+0x74>)
 8000718:	f002 fce6 	bl	80030e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	480a      	ldr	r0, [pc, #40]	@ (8000748 <main+0x78>)
 8000720:	f002 fce2 	bl	80030e8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  debugProcess();
 8000724:	f000 fb62 	bl	8000dec <debugProcess>
	  commProcess();
 8000728:	f000 fb30 	bl	8000d8c <commProcess>
	  sensProcess();
 800072c:	f000 fb27 	bl	8000d7e <sensProcess>
	  //errProcess(); //TODO Uncomment to perform handler
	  //calcProcess(); //TODO Uncomment to calculate duty
	  ledProcess();
 8000730:	f000 fb34 	bl	8000d9c <ledProcess>
	  debugProcess();
 8000734:	bf00      	nop
 8000736:	e7f5      	b.n	8000724 <main+0x54>
 8000738:	20000170 	.word	0x20000170
 800073c:	200001bc 	.word	0x200001bc
 8000740:	200000d8 	.word	0x200000d8
 8000744:	20000124 	.word	0x20000124
 8000748:	20000208 	.word	0x20000208

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2234      	movs	r2, #52	@ 0x34
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f004 facb 	bl	8004cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000770:	f001 fa36 	bl	8001be0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <SystemClock_Config+0xd8>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <SystemClock_Config+0xd8>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <SystemClock_Config+0xd8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <SystemClock_Config+0xdc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a25      	ldr	r2, [pc, #148]	@ (8000828 <SystemClock_Config+0xdc>)
 8000792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <SystemClock_Config+0xdc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007bc:	23d8      	movs	r3, #216	@ 0xd8
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fa65 	bl	8001ca0 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 fac2 	bl	8000d64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e0:	f001 fa0e 	bl	8001c00 <HAL_PWREx_EnableOverDrive>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007ea:	f000 fabb 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000804:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2107      	movs	r1, #7
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fcf5 	bl	80021fc <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000818:	f000 faa4 	bl	8000d64 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b096      	sub	sp, #88	@ 0x58
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	222c      	movs	r2, #44	@ 0x2c
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f004 fa4c 	bl	8004cf6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085e:	4b3a      	ldr	r3, [pc, #232]	@ (8000948 <MX_TIM1_Init+0x11c>)
 8000860:	4a3a      	ldr	r2, [pc, #232]	@ (800094c <MX_TIM1_Init+0x120>)
 8000862:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000864:	4b38      	ldr	r3, [pc, #224]	@ (8000948 <MX_TIM1_Init+0x11c>)
 8000866:	220f      	movs	r2, #15
 8000868:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b37      	ldr	r3, [pc, #220]	@ (8000948 <MX_TIM1_Init+0x11c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62499;
 8000870:	4b35      	ldr	r3, [pc, #212]	@ (8000948 <MX_TIM1_Init+0x11c>)
 8000872:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000876:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b33      	ldr	r3, [pc, #204]	@ (8000948 <MX_TIM1_Init+0x11c>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087e:	4b32      	ldr	r3, [pc, #200]	@ (8000948 <MX_TIM1_Init+0x11c>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <MX_TIM1_Init+0x11c>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800088a:	482f      	ldr	r0, [pc, #188]	@ (8000948 <MX_TIM1_Init+0x11c>)
 800088c:	f002 fbd4 	bl	8003038 <HAL_TIM_PWM_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 fa65 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008aa:	4619      	mov	r1, r3
 80008ac:	4826      	ldr	r0, [pc, #152]	@ (8000948 <MX_TIM1_Init+0x11c>)
 80008ae:	f003 fa89 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008b8:	f000 fa54 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	@ 0x60
 80008be:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 31250;
 80008c0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ca:	2300      	movs	r3, #0
 80008cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80008d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4818      	ldr	r0, [pc, #96]	@ (8000948 <MX_TIM1_Init+0x11c>)
 80008e6:	f002 fe01 	bl	80034ec <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008f0:	f000 fa38 	bl	8000d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000900:	23ff      	movs	r3, #255	@ 0xff
 8000902:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000916:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	4619      	mov	r1, r3
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <MX_TIM1_Init+0x11c>)
 800092a:	f003 fad9 	bl	8003ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000934:	f000 fa16 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <MX_TIM1_Init+0x11c>)
 800093a:	f000 fb91 	bl	8001060 <HAL_TIM_MspPostInit>

}
 800093e:	bf00      	nop
 8000940:	3758      	adds	r7, #88	@ 0x58
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000008c 	.word	0x2000008c
 800094c:	40010000 	.word	0x40010000

08000950 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 8000976:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <MX_TIM3_Init+0xb4>)
 8000978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1647;
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 800097c:	f240 626f 	movw	r2, #1647	@ 0x66f
 8000980:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65532;
 8000988:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 800098a:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800098e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800099c:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 800099e:	f002 fb4b 	bl	8003038 <HAL_TIM_PWM_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 f9dc 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4811      	ldr	r0, [pc, #68]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 80009bc:	f003 fa02 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80009c6:	f000 f9cd 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ca:	2360      	movs	r3, #96	@ 0x60
 80009cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	2208      	movs	r2, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 80009e2:	f002 fd83 	bl	80034ec <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80009ec:	f000 f9ba 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <MX_TIM3_Init+0xb0>)
 80009f2:	f000 fb35 	bl	8001060 <HAL_TIM_MspPostInit>

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000d8 	.word	0x200000d8
 8000a04:	40000400 	.word	0x40000400

08000a08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_TIM4_Init+0xb4>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1647;
 8000a32:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a34:	f240 626f 	movw	r2, #1647	@ 0x66f
 8000a38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65532;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a42:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000a46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a54:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a56:	f002 faef 	bl	8003038 <HAL_TIM_PWM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 f980 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a74:	f003 f9a6 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000a7e:	f000 f971 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	@ 0x60
 8000a84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	2204      	movs	r2, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000a9a:	f002 fd27 	bl	80034ec <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000aa4:	f000 f95e 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM4_Init+0xb0>)
 8000aaa:	f000 fad9 	bl	8001060 <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	@ 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000124 	.word	0x20000124
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_TIM6_Init+0x64>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_TIM6_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_TIM6_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10799;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <MX_TIM6_Init+0x64>)
 8000ae4:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000ae8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_TIM6_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <MX_TIM6_Init+0x64>)
 8000af2:	f002 f9d1 	bl	8002e98 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000afc:	f000 f932 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_TIM6_Init+0x64>)
 8000b0e:	f003 f959 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 f924 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000170 	.word	0x20000170
 8000b28:	40001000 	.word	0x40001000

08000b2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <MX_TIM7_Init+0x68>)
 8000b3e:	4a16      	ldr	r2, [pc, #88]	@ (8000b98 <MX_TIM7_Init+0x6c>)
 8000b40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1727;
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_TIM7_Init+0x68>)
 8000b44:	f240 62bf 	movw	r2, #1727	@ 0x6bf
 8000b48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <MX_TIM7_Init+0x68>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <MX_TIM7_Init+0x68>)
 8000b52:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000b56:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_TIM7_Init+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b5e:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <MX_TIM7_Init+0x68>)
 8000b60:	f002 f99a 	bl	8002e98 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000b6a:	f000 f8fb 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <MX_TIM7_Init+0x68>)
 8000b7c:	f003 f922 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000b86:	f000 f8ed 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001bc 	.word	0x200001bc
 8000b98:	40001400 	.word	0x40001400

08000b9c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <MX_TIM12_Init+0x88>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3295;
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000bbc:	f640 42df 	movw	r2, #3295	@ 0xcdf
 8000bc0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65532;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000bca:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8000bce:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000bdc:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000bde:	f002 fa2b 	bl	8003038 <HAL_TIM_PWM_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 8000be8:	f000 f8bc 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bec:	2360      	movs	r3, #96	@ 0x60
 8000bee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000c04:	f002 fc72 	bl	80034ec <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000c0e:	f000 f8a9 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000c12:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <MX_TIM12_Init+0x84>)
 8000c14:	f000 fa24 	bl	8001060 <HAL_TIM_MspPostInit>

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000208 	.word	0x20000208
 8000c24:	40001800 	.word	0x40001800

08000c28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	@ (8000c84 <MX_USART3_UART_Init+0x5c>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c48:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000c4c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c50:	220c      	movs	r2, #12
 8000c52:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_USART3_UART_Init+0x58>)
 8000c6e:	f003 f9d3 	bl	8004018 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 8000c78:	f000 f874 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000254 	.word	0x20000254
 8000c84:	40004800 	.word	0x40004800

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b2c      	ldr	r3, [pc, #176]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	4b29      	ldr	r3, [pc, #164]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a28      	ldr	r2, [pc, #160]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a22      	ldr	r2, [pc, #136]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a1c      	ldr	r2, [pc, #112]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000d04:	f043 0310 	orr.w	r3, r3, #16
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_GPIO_Init+0xd4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2101      	movs	r1, #1
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <MX_GPIO_Init+0xd8>)
 8000d34:	f000 ff3a 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_GPIO_Init+0xd8>)
 8000d50:	f000 fd80 	bl	8001854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	@ 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40021000 	.word	0x40021000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <initProcess>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
extern UART_HandleTypeDef huart3;


void initProcess()
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	//TODO Add initialization for system if needed
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <sensProcess>:
	}
}


void sensProcess()
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
	//TODO Read values from sensor and write them to corresponding variables
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <commProcess>:


void commProcess()
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	//TODO Add CAN communication and others if needed
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <ledProcess>:


void ledProcess()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	if (GetLedFlag())
 8000da0:	f7ff fc3e 	bl	8000620 <GetLedFlag>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d017      	beq.n	8000dda <ledProcess+0x3e>
	{
		ledBlueOn();
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <ledProcess+0x44>)
 8000dac:	f242 6266 	movw	r2, #9830	@ 0x2666
 8000db0:	639a      	str	r2, [r3, #56]	@ 0x38
		if (GetErrorCode() == NO_ERROR)
 8000db2:	f7ff fc47 	bl	8000644 <GetErrorCode>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d107      	bne.n	8000dcc <ledProcess+0x30>
		{
			ledGreenOn();
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <ledProcess+0x48>)
 8000dbe:	f242 6266 	movw	r2, #9830	@ 0x2666
 8000dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
			ledRedOff();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <ledProcess+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	635a      	str	r2, [r3, #52]	@ 0x34
		{
			ledRedOn();
			ledGreenOff();
		}
	}
}
 8000dca:	e006      	b.n	8000dda <ledProcess+0x3e>
			ledRedOn();
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <ledProcess+0x4c>)
 8000dce:	f242 6266 	movw	r2, #9830	@ 0x2666
 8000dd2:	635a      	str	r2, [r3, #52]	@ 0x34
			ledGreenOff();
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <ledProcess+0x48>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40000800 	.word	0x40000800
 8000de4:	40000400 	.word	0x40000400
 8000de8:	40001800 	.word	0x40001800

08000dec <debugProcess>:
	}
}


void debugProcess()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	//TODO Create interrupt and corresponding flag specific to debugProcess
	if (GetDebugStepFlag())
 8000df2:	f7ff fc4f 	bl	8000694 <GetDebugStepFlag>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d046      	beq.n	8000e8a <debugProcess+0x9e>
	{
		uint8_t mode = GetModeFlag();
 8000dfc:	f7ff fbf4 	bl	80005e8 <GetModeFlag>
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
		uint8_t error = GetErrorCode();
 8000e04:	f7ff fc1e 	bl	8000644 <GetErrorCode>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71bb      	strb	r3, [r7, #6]
		uint8_t pwm = GetPWMFlag();
 8000e0c:	f7ff fc54 	bl	80006b8 <GetPWMFlag>
 8000e10:	4603      	mov	r3, r0
 8000e12:	717b      	strb	r3, [r7, #5]

		switch(mode)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d009      	beq.n	8000e2e <debugProcess+0x42>
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	dc0f      	bgt.n	8000e3e <debugProcess+0x52>
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d009      	beq.n	8000e36 <debugProcess+0x4a>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10b      	bne.n	8000e3e <debugProcess+0x52>
		{
		case DISCHARGE:
			printf("MODE_D   ");
 8000e26:	481b      	ldr	r0, [pc, #108]	@ (8000e94 <debugProcess+0xa8>)
 8000e28:	f003 ff10 	bl	8004c4c <iprintf>
			break;
 8000e2c:	e007      	b.n	8000e3e <debugProcess+0x52>
		case CHARGE:
			printf("MODE_C   ");
 8000e2e:	481a      	ldr	r0, [pc, #104]	@ (8000e98 <debugProcess+0xac>)
 8000e30:	f003 ff0c 	bl	8004c4c <iprintf>
			break;
 8000e34:	e003      	b.n	8000e3e <debugProcess+0x52>
		case NO_MODE:
			printf("MODE_N   ");
 8000e36:	4819      	ldr	r0, [pc, #100]	@ (8000e9c <debugProcess+0xb0>)
 8000e38:	f003 ff08 	bl	8004c4c <iprintf>
			break;
 8000e3c:	bf00      	nop
		}

		switch(error)
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d006      	beq.n	8000e52 <debugProcess+0x66>
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	dc10      	bgt.n	8000e6a <debugProcess+0x7e>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00a      	beq.n	8000e62 <debugProcess+0x76>
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d004      	beq.n	8000e5a <debugProcess+0x6e>
 8000e50:	e00b      	b.n	8000e6a <debugProcess+0x7e>
		{
		case UNDERVOLTAGE_ERROR:
			printf("ERR_UNDRV   ");
 8000e52:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <debugProcess+0xb4>)
 8000e54:	f003 fefa 	bl	8004c4c <iprintf>
			break;
 8000e58:	e007      	b.n	8000e6a <debugProcess+0x7e>
		case OVERCURRENT_ERROR:
			printf("ERR_OVRCUR   ");
 8000e5a:	4812      	ldr	r0, [pc, #72]	@ (8000ea4 <debugProcess+0xb8>)
 8000e5c:	f003 fef6 	bl	8004c4c <iprintf>
			break;
 8000e60:	e003      	b.n	8000e6a <debugProcess+0x7e>
		case NO_ERROR:
			printf("ERR_NOERR   ");
 8000e62:	4811      	ldr	r0, [pc, #68]	@ (8000ea8 <debugProcess+0xbc>)
 8000e64:	f003 fef2 	bl	8004c4c <iprintf>
			break;
 8000e68:	bf00      	nop
		}


		switch(pwm)
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <debugProcess+0x90>
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d107      	bne.n	8000e84 <debugProcess+0x98>
		{
		case PWM_ON:
			printf("PWM_ON   ");
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <debugProcess+0xc0>)
 8000e76:	f003 fee9 	bl	8004c4c <iprintf>
			break;
 8000e7a:	e003      	b.n	8000e84 <debugProcess+0x98>
		case PWM_OFF:
			printf("PWM_OFF   ");
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <debugProcess+0xc4>)
 8000e7e:	f003 fee5 	bl	8004c4c <iprintf>
			break;
 8000e82:	bf00      	nop
		}

		printf("\n\r");
 8000e84:	480b      	ldr	r0, [pc, #44]	@ (8000eb4 <debugProcess+0xc8>)
 8000e86:	f003 fee1 	bl	8004c4c <iprintf>

	}
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08005940 	.word	0x08005940
 8000e98:	0800594c 	.word	0x0800594c
 8000e9c:	08005958 	.word	0x08005958
 8000ea0:	08005964 	.word	0x08005964
 8000ea4:	08005974 	.word	0x08005974
 8000ea8:	08005984 	.word	0x08005984
 8000eac:	08005994 	.word	0x08005994
 8000eb0:	080059a0 	.word	0x080059a0
 8000eb4:	080059ac 	.word	0x080059ac

08000eb8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <__io_putchar+0x20>)
 8000eca:	f003 f8f3 	bl	80040b4 <HAL_UART_Transmit>

  return ch;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000254 	.word	0x20000254

08000edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <HAL_MspInit+0x44>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <HAL_MspInit+0x44>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <HAL_MspInit+0x44>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <HAL_MspInit+0x44>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_MspInit+0x44>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a25      	ldr	r2, [pc, #148]	@ (8000fc8 <HAL_TIM_PWM_MspInit+0xa4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10c      	bne.n	8000f50 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a24      	ldr	r2, [pc, #144]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f42:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000f4e:	e034      	b.n	8000fba <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_TIM_PWM_MspInit+0xac>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10c      	bne.n	8000f74 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
}
 8000f72:	e022      	b.n	8000fba <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a16      	ldr	r2, [pc, #88]	@ (8000fd4 <HAL_TIM_PWM_MspInit+0xb0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10c      	bne.n	8000f98 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
}
 8000f96:	e010      	b.n	8000fba <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM12)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <HAL_TIM_PWM_MspInit+0xb4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10b      	bne.n	8000fba <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <HAL_TIM_PWM_MspInit+0xa8>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
}
 8000fba:	bf00      	nop
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40000400 	.word	0x40000400
 8000fd4:	40000800 	.word	0x40000800
 8000fd8:	40001800 	.word	0x40001800

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8001054 <HAL_TIM_Base_MspInit+0x78>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d114      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <HAL_TIM_Base_MspInit+0x7c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <HAL_TIM_Base_MspInit+0x7c>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <HAL_TIM_Base_MspInit+0x7c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2036      	movs	r0, #54	@ 0x36
 800100c:	f000 fbeb 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001010:	2036      	movs	r0, #54	@ 0x36
 8001012:	f000 fc04 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001016:	e018      	b.n	800104a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0f      	ldr	r2, [pc, #60]	@ (800105c <HAL_TIM_Base_MspInit+0x80>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d113      	bne.n	800104a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <HAL_TIM_Base_MspInit+0x7c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a0c      	ldr	r2, [pc, #48]	@ (8001058 <HAL_TIM_Base_MspInit+0x7c>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <HAL_TIM_Base_MspInit+0x7c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2037      	movs	r0, #55	@ 0x37
 8001040:	f000 fbd1 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001044:	2037      	movs	r0, #55	@ 0x37
 8001046:	f000 fbea 	bl	800181e <HAL_NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40001000 	.word	0x40001000
 8001058:	40023800 	.word	0x40023800
 800105c:	40001400 	.word	0x40001400

08001060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a53      	ldr	r2, [pc, #332]	@ (80011cc <HAL_TIM_MspPostInit+0x16c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d139      	bne.n	80010f6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b53      	ldr	r3, [pc, #332]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a52      	ldr	r2, [pc, #328]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b50      	ldr	r3, [pc, #320]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4b4d      	ldr	r3, [pc, #308]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b4a      	ldr	r3, [pc, #296]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4841      	ldr	r0, [pc, #260]	@ (80011d4 <HAL_TIM_MspPostInit+0x174>)
 80010ce:	f000 fbc1 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	483a      	ldr	r0, [pc, #232]	@ (80011d8 <HAL_TIM_MspPostInit+0x178>)
 80010f0:	f000 fbb0 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80010f4:	e065      	b.n	80011c2 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM3)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a38      	ldr	r2, [pc, #224]	@ (80011dc <HAL_TIM_MspPostInit+0x17c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d11c      	bne.n	800113a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b33      	ldr	r3, [pc, #204]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4a32      	ldr	r2, [pc, #200]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
 800110c:	4b30      	ldr	r3, [pc, #192]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LD1_GREEN_Pin;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001128:	2302      	movs	r3, #2
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LD1_GREEN_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	482b      	ldr	r0, [pc, #172]	@ (80011e0 <HAL_TIM_MspPostInit+0x180>)
 8001134:	f000 fb8e 	bl	8001854 <HAL_GPIO_Init>
}
 8001138:	e043      	b.n	80011c2 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM4)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a29      	ldr	r2, [pc, #164]	@ (80011e4 <HAL_TIM_MspPostInit+0x184>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d11c      	bne.n	800117e <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LD2_BLUE_Pin;
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800116c:	2302      	movs	r3, #2
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LD2_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	481a      	ldr	r0, [pc, #104]	@ (80011e0 <HAL_TIM_MspPostInit+0x180>)
 8001178:	f000 fb6c 	bl	8001854 <HAL_GPIO_Init>
}
 800117c:	e021      	b.n	80011c2 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM12)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a19      	ldr	r2, [pc, #100]	@ (80011e8 <HAL_TIM_MspPostInit+0x188>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d11c      	bne.n	80011c2 <HAL_TIM_MspPostInit+0x162>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	4a10      	ldr	r2, [pc, #64]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	6313      	str	r3, [r2, #48]	@ 0x30
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_TIM_MspPostInit+0x170>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LD3_RED_Pin;
 80011a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80011b2:	2309      	movs	r3, #9
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LD3_RED_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4808      	ldr	r0, [pc, #32]	@ (80011e0 <HAL_TIM_MspPostInit+0x180>)
 80011be:	f000 fb49 	bl	8001854 <HAL_GPIO_Init>
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	@ 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40010000 	.word	0x40010000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40000400 	.word	0x40000400
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40000800 	.word	0x40000800
 80011e8:	40001800 	.word	0x40001800

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0ae      	sub	sp, #184	@ 0xb8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2290      	movs	r2, #144	@ 0x90
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f003 fd72 	bl	8004cf6 <memset>
  if(huart->Instance==USART3)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a33      	ldr	r2, [pc, #204]	@ (80012e4 <HAL_UART_MspInit+0xf8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d15e      	bne.n	80012da <HAL_UART_MspInit+0xee>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800121c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001220:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001222:	2300      	movs	r3, #0
 8001224:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fa0c 	bl	8002648 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001236:	f7ff fd95 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	4a2a      	ldr	r2, [pc, #168]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001244:	6413      	str	r3, [r2, #64]	@ 0x40
 8001246:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a24      	ldr	r2, [pc, #144]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a1e      	ldr	r2, [pc, #120]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001282:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800129c:	2307      	movs	r3, #7
 800129e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4810      	ldr	r0, [pc, #64]	@ (80012ec <HAL_UART_MspInit+0x100>)
 80012aa:	f000 fad3 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c8:	2307      	movs	r3, #7
 80012ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <HAL_UART_MspInit+0x104>)
 80012d6:	f000 fabd 	bl	8001854 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80012da:	bf00      	nop
 80012dc:	37b8      	adds	r7, #184	@ 0xb8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004800 	.word	0x40004800
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020c00 	.word	0x40020c00

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <NMI_Handler+0x4>

080012fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <UsageFault_Handler+0x4>

0800131c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 f951 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM6_DAC_IRQHandler+0x10>)
 800135a:	f001 ffbf 	bl	80032dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  	 //HAL_GPIO_TogglePin(LD1_GREEN_GPIO_Port, LD1_GREEN_Pin);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000170 	.word	0x20000170

08001368 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM7_IRQHandler+0x10>)
 800136e:	f001 ffb5 	bl	80032dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200001bc 	.word	0x200001bc

0800137c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		SetStepFlag();
 800138e:	f7ff f91f 	bl	80005d0 <SetStepFlag>
	}
	if(htim->Instance == TIM7)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a07      	ldr	r2, [pc, #28]	@ (80013b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d105      	bne.n	80013a8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		SetLedFlag();
 800139c:	f7ff f934 	bl	8000608 <SetLedFlag>
		SetDebugStepFlag();
 80013a0:	f7ff f96c 	bl	800067c <SetDebugStepFlag>

		//TODO Change to specific timer for handler
		SetHandlerStepFlag();
 80013a4:	f7ff f95e 	bl	8000664 <SetHandlerStepFlag>
	}
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40001000 	.word	0x40001000
 80013b4:	40001400 	.word	0x40001400

080013b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00a      	b.n	80013e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ca:	f3af 8000 	nop.w
 80013ce:	4601      	mov	r1, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf0      	blt.n	80013ca <_read+0x12>
  }

  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e009      	b.n	8001418 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fd53 	bl	8000eb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf1      	blt.n	8001404 <_write+0x12>
  }
  return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_close>:

int _close(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001452:	605a      	str	r2, [r3, #4]
  return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_isatty>:

int _isatty(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f003 fc66 	bl	8004d94 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20080000 	.word	0x20080000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	200002dc 	.word	0x200002dc
 80014fc:	20000430 	.word	0x20000430

08001500 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <Reset_Handler>:
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800155c <LoopFillZerobss+0xe>
 8001528:	f7ff ffea 	bl	8001500 <SystemInit>
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <LoopFillZerobss+0x12>)
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <LoopFillZerobss+0x16>)
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <LoopFillZerobss+0x1a>)
 8001532:	2300      	movs	r3, #0
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:
 8001536:	58d4      	ldr	r4, [r2, r3]
 8001538:	50c4      	str	r4, [r0, r3]
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:
 800153c:	18c4      	adds	r4, r0, r3
 800153e:	428c      	cmp	r4, r1
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <LoopFillZerobss+0x1e>)
 8001544:	4c0a      	ldr	r4, [pc, #40]	@ (8001570 <LoopFillZerobss+0x22>)
 8001546:	2300      	movs	r3, #0
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:
 800154e:	42a2      	cmp	r2, r4
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>
 8001552:	f003 fc25 	bl	8004da0 <__libc_init_array>
 8001556:	f7ff f8bb 	bl	80006d0 <main>
 800155a:	4770      	bx	lr
 800155c:	20080000 	.word	0x20080000
 8001560:	20000000 	.word	0x20000000
 8001564:	20000068 	.word	0x20000068
 8001568:	08005a0c 	.word	0x08005a0c
 800156c:	20000068 	.word	0x20000068
 8001570:	20000430 	.word	0x20000430

08001574 <ADC_IRQHandler>:
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>

08001576 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157a:	2003      	movs	r0, #3
 800157c:	f000 f928 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001580:	200f      	movs	r0, #15
 8001582:	f000 f805 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001586:	f7ff fca9 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f943 	bl	800183a <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f90b 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	200002e0 	.word	0x200002e0

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200002e0 	.word	0x200002e0

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	4313      	orrs	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	05fa0000 	.word	0x05fa0000

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	@ (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	@ 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e175      	b.n	8001b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8164 	bne.w	8001b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x56>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80be 	beq.w	8001b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a65      	ldr	r2, [pc, #404]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019f6:	4a61      	ldr	r2, [pc, #388]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	@ (8001b80 <HAL_GPIO_Init+0x32c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d037      	beq.n	8001a92 <HAL_GPIO_Init+0x23e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a57      	ldr	r2, [pc, #348]	@ (8001b84 <HAL_GPIO_Init+0x330>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_GPIO_Init+0x23a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a56      	ldr	r2, [pc, #344]	@ (8001b88 <HAL_GPIO_Init+0x334>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x236>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <HAL_GPIO_Init+0x338>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x232>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a54      	ldr	r2, [pc, #336]	@ (8001b90 <HAL_GPIO_Init+0x33c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x22e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a53      	ldr	r2, [pc, #332]	@ (8001b94 <HAL_GPIO_Init+0x340>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x22a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_GPIO_Init+0x344>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	@ (8001b9c <HAL_GPIO_Init+0x348>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_GPIO_Init+0x34c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_GPIO_Init+0x350>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	e012      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a6e:	230a      	movs	r3, #10
 8001a70:	e010      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a34      	ldr	r2, [pc, #208]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae86 	bls.w	8001874 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022400 	.word	0x40022400
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40007000 	.word	0x40007000

08001c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a22      	ldr	r2, [pc, #136]	@ (8001c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1d      	ldr	r2, [pc, #116]	@ (8001c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c2e:	f7ff fcf3 	bl	8001618 <HAL_GetTick>
 8001c32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c34:	e009      	b.n	8001c4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c36:	f7ff fcef 	bl	8001618 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c44:	d901      	bls.n	8001c4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e022      	b.n	8001c90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c56:	d1ee      	bne.n	8001c36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c58:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff fcd8 	bl	8001618 <HAL_GetTick>
 8001c68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c6a:	e009      	b.n	8001c80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c6c:	f7ff fcd4 	bl	8001618 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c7a:	d901      	bls.n	8001c80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e007      	b.n	8001c90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c8c:	d1ee      	bne.n	8001c6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40007000 	.word	0x40007000

08001ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e29b      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8087 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc4:	4b96      	ldr	r3, [pc, #600]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d00c      	beq.n	8001cea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd0:	4b93      	ldr	r3, [pc, #588]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d112      	bne.n	8001d02 <HAL_RCC_OscConfig+0x62>
 8001cdc:	4b90      	ldr	r3, [pc, #576]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce8:	d10b      	bne.n	8001d02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cea:	4b8d      	ldr	r3, [pc, #564]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d06c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x130>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d168      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e275      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x7a>
 8001d0c:	4b84      	ldr	r3, [pc, #528]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a83      	ldr	r2, [pc, #524]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e02e      	b.n	8001d78 <HAL_RCC_OscConfig+0xd8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x9c>
 8001d22:	4b7f      	ldr	r3, [pc, #508]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7e      	ldr	r2, [pc, #504]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7b      	ldr	r2, [pc, #492]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e01d      	b.n	8001d78 <HAL_RCC_OscConfig+0xd8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0xc0>
 8001d46:	4b76      	ldr	r3, [pc, #472]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a75      	ldr	r2, [pc, #468]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b73      	ldr	r3, [pc, #460]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a72      	ldr	r2, [pc, #456]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0xd8>
 8001d60:	4b6f      	ldr	r3, [pc, #444]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6e      	ldr	r2, [pc, #440]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6b      	ldr	r2, [pc, #428]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fc4a 	bl	8001618 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fc46 	bl	8001618 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	@ 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e229      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b61      	ldr	r3, [pc, #388]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0xe8>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc36 	bl	8001618 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fc32 	bl	8001618 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	@ 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e215      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	4b57      	ldr	r3, [pc, #348]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x110>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d069      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dde:	4b50      	ldr	r3, [pc, #320]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dea:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d11c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x190>
 8001df6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	4b47      	ldr	r3, [pc, #284]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1e9      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	493d      	ldr	r1, [pc, #244]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	e040      	b.n	8001eb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d023      	beq.n	8001e80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e38:	4b39      	ldr	r3, [pc, #228]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a38      	ldr	r2, [pc, #224]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fbe8 	bl	8001618 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fbe4 	bl	8001618 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1c7      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b30      	ldr	r3, [pc, #192]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4929      	ldr	r1, [pc, #164]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
 8001e7e:	e018      	b.n	8001eb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a26      	ldr	r2, [pc, #152]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fbc4 	bl	8001618 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff fbc0 	bl	8001618 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1a3      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d038      	beq.n	8001f30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d019      	beq.n	8001efa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eca:	4a15      	ldr	r2, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fba1 	bl	8001618 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff fb9d 	bl	8001618 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e180      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x23a>
 8001ef8:	e01a      	b.n	8001f30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efe:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <HAL_RCC_OscConfig+0x280>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f06:	f7ff fb87 	bl	8001618 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7ff fb83 	bl	8001618 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d903      	bls.n	8001f24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e166      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
 8001f20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b92      	ldr	r3, [pc, #584]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a4 	beq.w	8002086 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b8c      	ldr	r3, [pc, #560]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10d      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a88      	ldr	r2, [pc, #544]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b86      	ldr	r3, [pc, #536]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f66:	4b83      	ldr	r3, [pc, #524]	@ (8002174 <HAL_RCC_OscConfig+0x4d4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f72:	4b80      	ldr	r3, [pc, #512]	@ (8002174 <HAL_RCC_OscConfig+0x4d4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7f      	ldr	r2, [pc, #508]	@ (8002174 <HAL_RCC_OscConfig+0x4d4>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb4b 	bl	8001618 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7ff fb47 	bl	8001618 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	@ 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e12a      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f98:	4b76      	ldr	r3, [pc, #472]	@ (8002174 <HAL_RCC_OscConfig+0x4d4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x31a>
 8001fac:	4b70      	ldr	r3, [pc, #448]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb0:	4a6f      	ldr	r2, [pc, #444]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb8:	e02d      	b.n	8002016 <HAL_RCC_OscConfig+0x376>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x33c>
 8001fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc6:	4a6a      	ldr	r2, [pc, #424]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fce:	4b68      	ldr	r3, [pc, #416]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd2:	4a67      	ldr	r2, [pc, #412]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fda:	e01c      	b.n	8002016 <HAL_RCC_OscConfig+0x376>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x35e>
 8001fe4:	4b62      	ldr	r3, [pc, #392]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a61      	ldr	r2, [pc, #388]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	4b5f      	ldr	r3, [pc, #380]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x376>
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	4a5b      	ldr	r2, [pc, #364]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	@ 0x70
 800200a:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	4a58      	ldr	r2, [pc, #352]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff fafb 	bl	8001618 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff faf7 	bl	8001618 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0d8      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b4c      	ldr	r3, [pc, #304]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x386>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204a:	f7ff fae5 	bl	8001618 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff fae1 	bl	8001618 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0c2      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a3c      	ldr	r2, [pc, #240]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80ae 	beq.w	80021ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002090:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d06d      	beq.n	8002178 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d14b      	bne.n	800213c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a31      	ldr	r2, [pc, #196]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 80020aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fab2 	bl	8001618 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff faae 	bl	8001618 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e091      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	071b      	lsls	r3, r3, #28
 8002102:	491b      	ldr	r1, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fa80 	bl	8001618 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fa7c 	bl	8001618 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e05f      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x47c>
 800213a:	e057      	b.n	80021ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0b      	ldr	r2, [pc, #44]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff fa66 	bl	8001618 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7ff fa62 	bl	8001618 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e045      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x4b0>
 800216e:	e03d      	b.n	80021ec <HAL_RCC_OscConfig+0x54c>
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <HAL_RCC_OscConfig+0x558>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d030      	beq.n	80021e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d129      	bne.n	80021e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d122      	bne.n	80021e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d119      	bne.n	80021e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d10f      	bne.n	80021e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0d0      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b6a      	ldr	r3, [pc, #424]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d910      	bls.n	8002244 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b67      	ldr	r3, [pc, #412]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 020f 	bic.w	r2, r3, #15
 800222a:	4965      	ldr	r1, [pc, #404]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b63      	ldr	r3, [pc, #396]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0b8      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800225c:	4b59      	ldr	r3, [pc, #356]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a58      	ldr	r2, [pc, #352]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002274:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a52      	ldr	r2, [pc, #328]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800227e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b50      	ldr	r3, [pc, #320]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	494d      	ldr	r1, [pc, #308]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d040      	beq.n	8002320 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d115      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e07f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e073      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06b      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4936      	ldr	r1, [pc, #216]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7ff f992 	bl	8001618 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7ff f98e 	bl	8001618 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e053      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d210      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 020f 	bic.w	r2, r3, #15
 8002336:	4922      	ldr	r1, [pc, #136]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e032      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4916      	ldr	r1, [pc, #88]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	490e      	ldr	r1, [pc, #56]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800238e:	f000 f821 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490a      	ldr	r1, [pc, #40]	@ (80023c8 <HAL_RCC_ClockConfig+0x1cc>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_RCC_ClockConfig+0x1d0>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_RCC_ClockConfig+0x1d4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f8ee 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023c00 	.word	0x40023c00
 80023c4:	40023800 	.word	0x40023800
 80023c8:	080059b0 	.word	0x080059b0
 80023cc:	20000000 	.word	0x20000000
 80023d0:	20000004 	.word	0x20000004

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b094      	sub	sp, #80	@ 0x50
 80023da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	647b      	str	r3, [r7, #68]	@ 0x44
 80023e0:	2300      	movs	r3, #0
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023e4:	2300      	movs	r3, #0
 80023e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ec:	4b79      	ldr	r3, [pc, #484]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d00d      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x40>
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	f200 80e1 	bhi.w	80025c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x34>
 8002402:	2b04      	cmp	r3, #4
 8002404:	d003      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x3a>
 8002406:	e0db      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b73      	ldr	r3, [pc, #460]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240c:	e0db      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240e:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002410:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002412:	e0d8      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002414:	4b6f      	ldr	r3, [pc, #444]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800241c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800241e:	4b6d      	ldr	r3, [pc, #436]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d063      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	4b6a      	ldr	r3, [pc, #424]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	2200      	movs	r2, #0
 8002432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002434:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243c:	633b      	str	r3, [r7, #48]	@ 0x30
 800243e:	2300      	movs	r3, #0
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34
 8002442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002446:	4622      	mov	r2, r4
 8002448:	462b      	mov	r3, r5
 800244a:	f04f 0000 	mov.w	r0, #0
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	0159      	lsls	r1, r3, #5
 8002454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002458:	0150      	lsls	r0, r2, #5
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4621      	mov	r1, r4
 8002460:	1a51      	subs	r1, r2, r1
 8002462:	6139      	str	r1, [r7, #16]
 8002464:	4629      	mov	r1, r5
 8002466:	eb63 0301 	sbc.w	r3, r3, r1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002478:	4659      	mov	r1, fp
 800247a:	018b      	lsls	r3, r1, #6
 800247c:	4651      	mov	r1, sl
 800247e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002482:	4651      	mov	r1, sl
 8002484:	018a      	lsls	r2, r1, #6
 8002486:	4651      	mov	r1, sl
 8002488:	ebb2 0801 	subs.w	r8, r2, r1
 800248c:	4659      	mov	r1, fp
 800248e:	eb63 0901 	sbc.w	r9, r3, r1
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024a6:	4690      	mov	r8, r2
 80024a8:	4699      	mov	r9, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	eb18 0303 	adds.w	r3, r8, r3
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	462b      	mov	r3, r5
 80024b4:	eb49 0303 	adc.w	r3, r9, r3
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024c6:	4629      	mov	r1, r5
 80024c8:	024b      	lsls	r3, r1, #9
 80024ca:	4621      	mov	r1, r4
 80024cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024d0:	4621      	mov	r1, r4
 80024d2:	024a      	lsls	r2, r1, #9
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024da:	2200      	movs	r2, #0
 80024dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024e4:	f7fd fefc 	bl	80002e0 <__aeabi_uldivmod>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4613      	mov	r3, r2
 80024ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f0:	e058      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f2:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	2200      	movs	r2, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	4611      	mov	r1, r2
 80024fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
 8002508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800250c:	4642      	mov	r2, r8
 800250e:	464b      	mov	r3, r9
 8002510:	f04f 0000 	mov.w	r0, #0
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	0159      	lsls	r1, r3, #5
 800251a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251e:	0150      	lsls	r0, r2, #5
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4641      	mov	r1, r8
 8002526:	ebb2 0a01 	subs.w	sl, r2, r1
 800252a:	4649      	mov	r1, r9
 800252c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800253c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002544:	ebb2 040a 	subs.w	r4, r2, sl
 8002548:	eb63 050b 	sbc.w	r5, r3, fp
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	00eb      	lsls	r3, r5, #3
 8002556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800255a:	00e2      	lsls	r2, r4, #3
 800255c:	4614      	mov	r4, r2
 800255e:	461d      	mov	r5, r3
 8002560:	4643      	mov	r3, r8
 8002562:	18e3      	adds	r3, r4, r3
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	464b      	mov	r3, r9
 8002568:	eb45 0303 	adc.w	r3, r5, r3
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800257a:	4629      	mov	r1, r5
 800257c:	028b      	lsls	r3, r1, #10
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002584:	4621      	mov	r1, r4
 8002586:	028a      	lsls	r2, r1, #10
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800258e:	2200      	movs	r2, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	61fa      	str	r2, [r7, #28]
 8002594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002598:	f7fd fea2 	bl	80002e0 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	3301      	adds	r3, #1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3750      	adds	r7, #80	@ 0x50
 80025cc:	46bd      	mov	sp, r7
 80025ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200

080025e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000

080025f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025fc:	f7ff fff0 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0a9b      	lsrs	r3, r3, #10
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	@ (800261c <HAL_RCC_GetPCLK1Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	080059c0 	.word	0x080059c0

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002624:	f7ff ffdc 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0b5b      	lsrs	r3, r3, #13
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4903      	ldr	r1, [pc, #12]	@ (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	080059c0 	.word	0x080059c0

08002648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d012      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002670:	4b69      	ldr	r3, [pc, #420]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a68      	ldr	r2, [pc, #416]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800267a:	6093      	str	r3, [r2, #8]
 800267c:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002684:	4964      	ldr	r1, [pc, #400]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002692:	2301      	movs	r3, #1
 8002694:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d017      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	4959      	ldr	r1, [pc, #356]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026c0:	d101      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d017      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026de:	4b4e      	ldr	r3, [pc, #312]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	494a      	ldr	r1, [pc, #296]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026fc:	d101      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 808b 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b3a      	ldr	r3, [pc, #232]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	4a39      	ldr	r2, [pc, #228]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	@ 0x40
 8002738:	4b37      	ldr	r3, [pc, #220]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002744:	4b35      	ldr	r3, [pc, #212]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a34      	ldr	r2, [pc, #208]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe ff62 	bl	8001618 <HAL_GetTick>
 8002754:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe ff5e 	bl	8001618 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e38f      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800276a:	4b2c      	ldr	r3, [pc, #176]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002776:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d035      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d02e      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002794:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800279e:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027b6:	4a18      	ldr	r2, [pc, #96]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027bc:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d114      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe ff26 	bl	8001618 <HAL_GetTick>
 80027cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe ff22 	bl	8001618 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e351      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ee      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027fe:	d111      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800280e:	400b      	ands	r3, r1
 8002810:	4901      	ldr	r1, [pc, #4]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
 8002816:	e00b      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000
 8002820:	0ffffcff 	.word	0x0ffffcff
 8002824:	4bac      	ldr	r3, [pc, #688]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4aab      	ldr	r2, [pc, #684]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800282e:	6093      	str	r3, [r2, #8]
 8002830:	4ba9      	ldr	r3, [pc, #676]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002832:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	49a6      	ldr	r1, [pc, #664]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283e:	4313      	orrs	r3, r2
 8002840:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800284e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002854:	4aa0      	ldr	r2, [pc, #640]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800285a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800285e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002860:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	499b      	ldr	r1, [pc, #620]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287c:	4b96      	ldr	r3, [pc, #600]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002882:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800288a:	4993      	ldr	r1, [pc, #588]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800289e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028ac:	498a      	ldr	r1, [pc, #552]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028c0:	4b85      	ldr	r3, [pc, #532]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ce:	4982      	ldr	r1, [pc, #520]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028e2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	4979      	ldr	r1, [pc, #484]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002904:	4b74      	ldr	r3, [pc, #464]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	4971      	ldr	r1, [pc, #452]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002926:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292c:	f023 020c 	bic.w	r2, r3, #12
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002934:	4968      	ldr	r1, [pc, #416]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002948:	4b63      	ldr	r3, [pc, #396]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002956:	4960      	ldr	r1, [pc, #384]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800296a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002970:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002978:	4957      	ldr	r1, [pc, #348]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800298c:	4b52      	ldr	r3, [pc, #328]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002992:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	494f      	ldr	r1, [pc, #316]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029ae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	4946      	ldr	r1, [pc, #280]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029d0:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	493e      	ldr	r1, [pc, #248]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029f2:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a00:	4935      	ldr	r1, [pc, #212]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a14:	4b30      	ldr	r3, [pc, #192]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a22:	492d      	ldr	r1, [pc, #180]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d011      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a36:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a44:	4924      	ldr	r1, [pc, #144]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a54:	d101      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a76:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a84:	4914      	ldr	r1, [pc, #80]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aa8:	490b      	ldr	r1, [pc, #44]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00f      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002acc:	4902      	ldr	r1, [pc, #8]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ad4:	e002      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ae8:	4b8a      	ldr	r3, [pc, #552]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af8:	4986      	ldr	r1, [pc, #536]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b0c:	4b81      	ldr	r3, [pc, #516]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b1c:	497d      	ldr	r1, [pc, #500]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d006      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80d6 	beq.w	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b38:	4b76      	ldr	r3, [pc, #472]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a75      	ldr	r2, [pc, #468]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b44:	f7fe fd68 	bl	8001618 <HAL_GetTick>
 8002b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b4c:	f7fe fd64 	bl	8001618 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	@ 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e195      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d021      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11d      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b7e:	4b65      	ldr	r3, [pc, #404]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b8c:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b92:	0e1b      	lsrs	r3, r3, #24
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	019a      	lsls	r2, r3, #6
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	071b      	lsls	r3, r3, #28
 8002bb2:	4958      	ldr	r1, [pc, #352]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d02e      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be4:	d129      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002be6:	4b4b      	ldr	r3, [pc, #300]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf4:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bfa:	0f1b      	lsrs	r3, r3, #28
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	019a      	lsls	r2, r3, #6
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	071b      	lsls	r3, r3, #28
 8002c1a:	493e      	ldr	r1, [pc, #248]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c22:	4b3c      	ldr	r3, [pc, #240]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c28:	f023 021f 	bic.w	r2, r3, #31
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	3b01      	subs	r3, #1
 8002c32:	4938      	ldr	r1, [pc, #224]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01d      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c46:	4b33      	ldr	r3, [pc, #204]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c4c:	0e1b      	lsrs	r3, r3, #24
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c54:	4b2f      	ldr	r3, [pc, #188]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c5a:	0f1b      	lsrs	r3, r3, #28
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	019a      	lsls	r2, r3, #6
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	4926      	ldr	r1, [pc, #152]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d011      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	019a      	lsls	r2, r3, #6
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	071b      	lsls	r3, r3, #28
 8002caa:	491a      	ldr	r1, [pc, #104]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cbe:	f7fe fcab 	bl	8001618 <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cc6:	f7fe fca7 	bl	8001618 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b64      	cmp	r3, #100	@ 0x64
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0d8      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	f040 80ce 	bne.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cec:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fc8e 	bl	8001618 <HAL_GetTick>
 8002cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d00:	f7fe fc8a 	bl	8001618 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d904      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0bb      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d18:	4b5e      	ldr	r3, [pc, #376]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d24:	d0ec      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02e      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d12a      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d4e:	4b51      	ldr	r3, [pc, #324]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	0f1b      	lsrs	r3, r3, #28
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	019a      	lsls	r2, r3, #6
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	071b      	lsls	r3, r3, #28
 8002d82:	4944      	ldr	r1, [pc, #272]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d8a:	4b42      	ldr	r3, [pc, #264]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d90:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	493d      	ldr	r1, [pc, #244]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db8:	d11d      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dba:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc0:	0e1b      	lsrs	r3, r3, #24
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc8:	4b32      	ldr	r3, [pc, #200]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	0f1b      	lsrs	r3, r3, #28
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	019a      	lsls	r2, r3, #6
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	431a      	orrs	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	071b      	lsls	r3, r3, #28
 8002dee:	4929      	ldr	r1, [pc, #164]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d028      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e02:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e08:	0e1b      	lsrs	r3, r3, #24
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	019a      	lsls	r2, r3, #6
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	071b      	lsls	r3, r3, #28
 8002e36:	4917      	ldr	r1, [pc, #92]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e3e:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4c:	4911      	ldr	r1, [pc, #68]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe fbda 	bl	8001618 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e68:	f7fe fbd6 	bl	8001618 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	@ 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e007      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e86:	d1ef      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e049      	b.n	8002f3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe f88c 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f000 fc44 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d001      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e054      	b.n	800300a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	@ (8003018 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d022      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8a:	d01d      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	@ (800301c <HAL_TIM_Base_Start_IT+0xd4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d018      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	@ (8003020 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d013      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1e      	ldr	r2, [pc, #120]	@ (8003028 <HAL_TIM_Base_Start_IT+0xe0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <HAL_TIM_Base_Start_IT+0xe4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x80>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003030 <HAL_TIM_Base_Start_IT+0xe8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d115      	bne.n	8002ff4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_TIM_Base_Start_IT+0xec>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d015      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0xbe>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe0:	d011      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	e008      	b.n	8003006 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e000      	b.n	8003008 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40010400 	.word	0x40010400
 800302c:	40014000 	.word	0x40014000
 8003030:	40001800 	.word	0x40001800
 8003034:	00010007 	.word	0x00010007

08003038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e049      	b.n	80030de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd ff60 	bl	8000f24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f000 fb74 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_TIM_PWM_Start+0x24>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e03c      	b.n	8003186 <HAL_TIM_PWM_Start+0x9e>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b04      	cmp	r3, #4
 8003110:	d109      	bne.n	8003126 <HAL_TIM_PWM_Start+0x3e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	bf14      	ite	ne
 800311e:	2301      	movne	r3, #1
 8003120:	2300      	moveq	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	e02f      	b.n	8003186 <HAL_TIM_PWM_Start+0x9e>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d109      	bne.n	8003140 <HAL_TIM_PWM_Start+0x58>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e022      	b.n	8003186 <HAL_TIM_PWM_Start+0x9e>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d109      	bne.n	800315a <HAL_TIM_PWM_Start+0x72>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	e015      	b.n	8003186 <HAL_TIM_PWM_Start+0x9e>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b10      	cmp	r3, #16
 800315e:	d109      	bne.n	8003174 <HAL_TIM_PWM_Start+0x8c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e008      	b.n	8003186 <HAL_TIM_PWM_Start+0x9e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e092      	b.n	80032b4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Start+0xb6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800319c:	e023      	b.n	80031e6 <HAL_TIM_PWM_Start+0xfe>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_PWM_Start+0xc6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ac:	e01b      	b.n	80031e6 <HAL_TIM_PWM_Start+0xfe>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0xd6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031bc:	e013      	b.n	80031e6 <HAL_TIM_PWM_Start+0xfe>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0xe6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031cc:	e00b      	b.n	80031e6 <HAL_TIM_PWM_Start+0xfe>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0xf6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031dc:	e003      	b.n	80031e6 <HAL_TIM_PWM_Start+0xfe>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	6839      	ldr	r1, [r7, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fdc2 	bl	8003d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a30      	ldr	r2, [pc, #192]	@ (80032bc <HAL_TIM_PWM_Start+0x1d4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_PWM_Start+0x120>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2f      	ldr	r2, [pc, #188]	@ (80032c0 <HAL_TIM_PWM_Start+0x1d8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_TIM_PWM_Start+0x124>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_TIM_PWM_Start+0x126>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a25      	ldr	r2, [pc, #148]	@ (80032bc <HAL_TIM_PWM_Start+0x1d4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_TIM_PWM_Start+0x18a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003234:	d01d      	beq.n	8003272 <HAL_TIM_PWM_Start+0x18a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a22      	ldr	r2, [pc, #136]	@ (80032c4 <HAL_TIM_PWM_Start+0x1dc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <HAL_TIM_PWM_Start+0x18a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a20      	ldr	r2, [pc, #128]	@ (80032c8 <HAL_TIM_PWM_Start+0x1e0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_TIM_PWM_Start+0x18a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1f      	ldr	r2, [pc, #124]	@ (80032cc <HAL_TIM_PWM_Start+0x1e4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIM_PWM_Start+0x18a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a19      	ldr	r2, [pc, #100]	@ (80032c0 <HAL_TIM_PWM_Start+0x1d8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_TIM_PWM_Start+0x18a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <HAL_TIM_PWM_Start+0x1e8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIM_PWM_Start+0x18a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a19      	ldr	r2, [pc, #100]	@ (80032d4 <HAL_TIM_PWM_Start+0x1ec>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d115      	bne.n	800329e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <HAL_TIM_PWM_Start+0x1f0>)
 800327a:	4013      	ands	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d015      	beq.n	80032b0 <HAL_TIM_PWM_Start+0x1c8>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328a:	d011      	beq.n	80032b0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329c:	e008      	b.n	80032b0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e000      	b.n	80032b2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40010400 	.word	0x40010400
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40001800 	.word	0x40001800
 80032d8:	00010007 	.word	0x00010007

080032dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d020      	beq.n	8003340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01b      	beq.n	8003340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0202 	mvn.w	r2, #2
 8003310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9fe 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9f0 	bl	8003714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fa01 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0204 	mvn.w	r2, #4
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9d8 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9ca 	bl	8003714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9db 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0208 	mvn.w	r2, #8
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2204      	movs	r2, #4
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f9b2 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9a4 	bl	8003714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f9b5 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0210 	mvn.w	r2, #16
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2208      	movs	r2, #8
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f98c 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f97e 	bl	8003714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f98f 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0201 	mvn.w	r2, #1
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd ff9a 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00c      	beq.n	8003476 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fdbd 	bl	8003ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fdb5 	bl	8004004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00c      	beq.n	80034be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f949 	bl	8003750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00c      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0220 	mvn.w	r2, #32
 80034da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fd7d 	bl	8003fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003506:	2302      	movs	r3, #2
 8003508:	e0ff      	b.n	800370a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b14      	cmp	r3, #20
 8003516:	f200 80f0 	bhi.w	80036fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800351a:	a201      	add	r2, pc, #4	@ (adr r2, 8003520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003575 	.word	0x08003575
 8003524:	080036fb 	.word	0x080036fb
 8003528:	080036fb 	.word	0x080036fb
 800352c:	080036fb 	.word	0x080036fb
 8003530:	080035b5 	.word	0x080035b5
 8003534:	080036fb 	.word	0x080036fb
 8003538:	080036fb 	.word	0x080036fb
 800353c:	080036fb 	.word	0x080036fb
 8003540:	080035f7 	.word	0x080035f7
 8003544:	080036fb 	.word	0x080036fb
 8003548:	080036fb 	.word	0x080036fb
 800354c:	080036fb 	.word	0x080036fb
 8003550:	08003637 	.word	0x08003637
 8003554:	080036fb 	.word	0x080036fb
 8003558:	080036fb 	.word	0x080036fb
 800355c:	080036fb 	.word	0x080036fb
 8003560:	08003679 	.word	0x08003679
 8003564:	080036fb 	.word	0x080036fb
 8003568:	080036fb 	.word	0x080036fb
 800356c:	080036fb 	.word	0x080036fb
 8003570:	080036b9 	.word	0x080036b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f99e 	bl	80038bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0208 	orr.w	r2, r2, #8
 800358e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6999      	ldr	r1, [r3, #24]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	619a      	str	r2, [r3, #24]
      break;
 80035b2:	e0a5      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f9f0 	bl	80039a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	021a      	lsls	r2, r3, #8
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	619a      	str	r2, [r3, #24]
      break;
 80035f4:	e084      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fa47 	bl	8003a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0208 	orr.w	r2, r2, #8
 8003610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0204 	bic.w	r2, r2, #4
 8003620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	61da      	str	r2, [r3, #28]
      break;
 8003634:	e064      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa9d 	bl	8003b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	61da      	str	r2, [r3, #28]
      break;
 8003676:	e043      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fad4 	bl	8003c2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0204 	bic.w	r2, r2, #4
 80036a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036b6:	e023      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fb06 	bl	8003cd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80036f8:	e002      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
      break;
 80036fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop

08003714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a46      	ldr	r2, [pc, #280]	@ (8003890 <TIM_Base_SetConfig+0x12c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003782:	d00f      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a43      	ldr	r2, [pc, #268]	@ (8003894 <TIM_Base_SetConfig+0x130>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00b      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a42      	ldr	r2, [pc, #264]	@ (8003898 <TIM_Base_SetConfig+0x134>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a41      	ldr	r2, [pc, #260]	@ (800389c <TIM_Base_SetConfig+0x138>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a40      	ldr	r2, [pc, #256]	@ (80038a0 <TIM_Base_SetConfig+0x13c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a35      	ldr	r2, [pc, #212]	@ (8003890 <TIM_Base_SetConfig+0x12c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c4:	d027      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a32      	ldr	r2, [pc, #200]	@ (8003894 <TIM_Base_SetConfig+0x130>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d023      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a31      	ldr	r2, [pc, #196]	@ (8003898 <TIM_Base_SetConfig+0x134>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a30      	ldr	r2, [pc, #192]	@ (800389c <TIM_Base_SetConfig+0x138>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2f      	ldr	r2, [pc, #188]	@ (80038a0 <TIM_Base_SetConfig+0x13c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d017      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a2e      	ldr	r2, [pc, #184]	@ (80038a4 <TIM_Base_SetConfig+0x140>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a2d      	ldr	r2, [pc, #180]	@ (80038a8 <TIM_Base_SetConfig+0x144>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a2c      	ldr	r2, [pc, #176]	@ (80038ac <TIM_Base_SetConfig+0x148>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <TIM_Base_SetConfig+0x14c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <TIM_Base_SetConfig+0x150>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a29      	ldr	r2, [pc, #164]	@ (80038b8 <TIM_Base_SetConfig+0x154>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800381c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a10      	ldr	r2, [pc, #64]	@ (8003890 <TIM_Base_SetConfig+0x12c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0xf8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <TIM_Base_SetConfig+0x13c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d103      	bne.n	8003864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f023 0201 	bic.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]
  }
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40010400 	.word	0x40010400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800
 80038b0:	40001800 	.word	0x40001800
 80038b4:	40001c00 	.word	0x40001c00
 80038b8:	40002000 	.word	0x40002000

080038bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0201 	bic.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <TIM_OC1_SetConfig+0xd8>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 0302 	bic.w	r3, r3, #2
 8003904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a21      	ldr	r2, [pc, #132]	@ (8003998 <TIM_OC1_SetConfig+0xdc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_OC1_SetConfig+0x64>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a20      	ldr	r2, [pc, #128]	@ (800399c <TIM_OC1_SetConfig+0xe0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d10c      	bne.n	800393a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0308 	bic.w	r3, r3, #8
 8003926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a16      	ldr	r2, [pc, #88]	@ (8003998 <TIM_OC1_SetConfig+0xdc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_OC1_SetConfig+0x8e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a15      	ldr	r2, [pc, #84]	@ (800399c <TIM_OC1_SetConfig+0xe0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d111      	bne.n	800396e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	621a      	str	r2, [r3, #32]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	fffeff8f 	.word	0xfffeff8f
 8003998:	40010000 	.word	0x40010000
 800399c:	40010400 	.word	0x40010400

080039a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f023 0210 	bic.w	r2, r3, #16
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003a84 <TIM_OC2_SetConfig+0xe4>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0320 	bic.w	r3, r3, #32
 80039ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a23      	ldr	r2, [pc, #140]	@ (8003a88 <TIM_OC2_SetConfig+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_OC2_SetConfig+0x68>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a22      	ldr	r2, [pc, #136]	@ (8003a8c <TIM_OC2_SetConfig+0xec>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10d      	bne.n	8003a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <TIM_OC2_SetConfig+0xe8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC2_SetConfig+0x94>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <TIM_OC2_SetConfig+0xec>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d113      	bne.n	8003a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	feff8fff 	.word	0xfeff8fff
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400

08003a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4b2d      	ldr	r3, [pc, #180]	@ (8003b70 <TIM_OC3_SetConfig+0xe0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	@ (8003b74 <TIM_OC3_SetConfig+0xe4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC3_SetConfig+0x66>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a21      	ldr	r2, [pc, #132]	@ (8003b78 <TIM_OC3_SetConfig+0xe8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10d      	bne.n	8003b12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a17      	ldr	r2, [pc, #92]	@ (8003b74 <TIM_OC3_SetConfig+0xe4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_OC3_SetConfig+0x92>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a16      	ldr	r2, [pc, #88]	@ (8003b78 <TIM_OC3_SetConfig+0xe8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d113      	bne.n	8003b4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	621a      	str	r2, [r3, #32]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	fffeff8f 	.word	0xfffeff8f
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40010400 	.word	0x40010400

08003b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <TIM_OC4_SetConfig+0xa4>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	031b      	lsls	r3, r3, #12
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <TIM_OC4_SetConfig+0xa8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC4_SetConfig+0x68>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a12      	ldr	r2, [pc, #72]	@ (8003c28 <TIM_OC4_SetConfig+0xac>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d109      	bne.n	8003bf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	621a      	str	r2, [r3, #32]
}
 8003c12:	bf00      	nop
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	feff8fff 	.word	0xfeff8fff
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40010400 	.word	0x40010400

08003c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <TIM_OC5_SetConfig+0x98>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a12      	ldr	r2, [pc, #72]	@ (8003cc8 <TIM_OC5_SetConfig+0x9c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_OC5_SetConfig+0x5e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a11      	ldr	r2, [pc, #68]	@ (8003ccc <TIM_OC5_SetConfig+0xa0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d109      	bne.n	8003c9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	fffeff8f 	.word	0xfffeff8f
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8003d6c <TIM_OC6_SetConfig+0x9c>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	051b      	lsls	r3, r3, #20
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a13      	ldr	r2, [pc, #76]	@ (8003d70 <TIM_OC6_SetConfig+0xa0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC6_SetConfig+0x60>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a12      	ldr	r2, [pc, #72]	@ (8003d74 <TIM_OC6_SetConfig+0xa4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d109      	bne.n	8003d44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	029b      	lsls	r3, r3, #10
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	feff8fff 	.word	0xfeff8fff
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40010400 	.word	0x40010400

08003d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e06d      	b.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4e:	d01d      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a15      	ldr	r2, [pc, #84]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40010400 	.word	0x40010400
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40001800 	.word	0x40001800

08003ee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e065      	b.n	8003fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	@ (8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d115      	bne.n	8003fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	051b      	lsls	r3, r3, #20
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40010400 	.word	0x40010400

08003fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e040      	b.n	80040ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd f8d6 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	@ 0x24
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fb16 	bl	8004690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8af 	bl	80041c8 <UART_SetConfig>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01b      	b.n	80040ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fb95 	bl	80047d4 <UART_CheckIdleState>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	@ 0x28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d177      	bne.n	80041bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_UART_Transmit+0x24>
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e070      	b.n	80041be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	@ 0x21
 80040e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ea:	f7fd fa95 	bl	8001618 <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004108:	d108      	bne.n	800411c <HAL_UART_Transmit+0x68>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e003      	b.n	8004124 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004124:	e02f      	b.n	8004186 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	@ 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fbf7 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e03b      	b.n	80041be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800415a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	3302      	adds	r3, #2
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e007      	b.n	8004174 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1c9      	bne.n	8004126 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	2140      	movs	r1, #64	@ 0x40
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fbc1 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e005      	b.n	80041be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4ba6      	ldr	r3, [pc, #664]	@ (800448c <UART_SetConfig+0x2c4>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6979      	ldr	r1, [r7, #20]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a94      	ldr	r2, [pc, #592]	@ (8004490 <UART_SetConfig+0x2c8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d120      	bne.n	8004286 <UART_SetConfig+0xbe>
 8004244:	4b93      	ldr	r3, [pc, #588]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b03      	cmp	r3, #3
 8004250:	d816      	bhi.n	8004280 <UART_SetConfig+0xb8>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <UART_SetConfig+0x90>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004269 	.word	0x08004269
 800425c:	08004275 	.word	0x08004275
 8004260:	0800426f 	.word	0x0800426f
 8004264:	0800427b 	.word	0x0800427b
 8004268:	2301      	movs	r3, #1
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e150      	b.n	8004510 <UART_SetConfig+0x348>
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e14d      	b.n	8004510 <UART_SetConfig+0x348>
 8004274:	2304      	movs	r3, #4
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e14a      	b.n	8004510 <UART_SetConfig+0x348>
 800427a:	2308      	movs	r3, #8
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e147      	b.n	8004510 <UART_SetConfig+0x348>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e144      	b.n	8004510 <UART_SetConfig+0x348>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a83      	ldr	r2, [pc, #524]	@ (8004498 <UART_SetConfig+0x2d0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d132      	bne.n	80042f6 <UART_SetConfig+0x12e>
 8004290:	4b80      	ldr	r3, [pc, #512]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b0c      	cmp	r3, #12
 800429c:	d828      	bhi.n	80042f0 <UART_SetConfig+0x128>
 800429e:	a201      	add	r2, pc, #4	@ (adr r2, 80042a4 <UART_SetConfig+0xdc>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042d9 	.word	0x080042d9
 80042a8:	080042f1 	.word	0x080042f1
 80042ac:	080042f1 	.word	0x080042f1
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	080042e5 	.word	0x080042e5
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	080042f1 	.word	0x080042f1
 80042c4:	080042df 	.word	0x080042df
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f1 	.word	0x080042f1
 80042d4:	080042eb 	.word	0x080042eb
 80042d8:	2300      	movs	r3, #0
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e118      	b.n	8004510 <UART_SetConfig+0x348>
 80042de:	2302      	movs	r3, #2
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e115      	b.n	8004510 <UART_SetConfig+0x348>
 80042e4:	2304      	movs	r3, #4
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e112      	b.n	8004510 <UART_SetConfig+0x348>
 80042ea:	2308      	movs	r3, #8
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e10f      	b.n	8004510 <UART_SetConfig+0x348>
 80042f0:	2310      	movs	r3, #16
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e10c      	b.n	8004510 <UART_SetConfig+0x348>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a68      	ldr	r2, [pc, #416]	@ (800449c <UART_SetConfig+0x2d4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d120      	bne.n	8004342 <UART_SetConfig+0x17a>
 8004300:	4b64      	ldr	r3, [pc, #400]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800430a:	2b30      	cmp	r3, #48	@ 0x30
 800430c:	d013      	beq.n	8004336 <UART_SetConfig+0x16e>
 800430e:	2b30      	cmp	r3, #48	@ 0x30
 8004310:	d814      	bhi.n	800433c <UART_SetConfig+0x174>
 8004312:	2b20      	cmp	r3, #32
 8004314:	d009      	beq.n	800432a <UART_SetConfig+0x162>
 8004316:	2b20      	cmp	r3, #32
 8004318:	d810      	bhi.n	800433c <UART_SetConfig+0x174>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <UART_SetConfig+0x15c>
 800431e:	2b10      	cmp	r3, #16
 8004320:	d006      	beq.n	8004330 <UART_SetConfig+0x168>
 8004322:	e00b      	b.n	800433c <UART_SetConfig+0x174>
 8004324:	2300      	movs	r3, #0
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e0f2      	b.n	8004510 <UART_SetConfig+0x348>
 800432a:	2302      	movs	r3, #2
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e0ef      	b.n	8004510 <UART_SetConfig+0x348>
 8004330:	2304      	movs	r3, #4
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e0ec      	b.n	8004510 <UART_SetConfig+0x348>
 8004336:	2308      	movs	r3, #8
 8004338:	77fb      	strb	r3, [r7, #31]
 800433a:	e0e9      	b.n	8004510 <UART_SetConfig+0x348>
 800433c:	2310      	movs	r3, #16
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e0e6      	b.n	8004510 <UART_SetConfig+0x348>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a56      	ldr	r2, [pc, #344]	@ (80044a0 <UART_SetConfig+0x2d8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d120      	bne.n	800438e <UART_SetConfig+0x1c6>
 800434c:	4b51      	ldr	r3, [pc, #324]	@ (8004494 <UART_SetConfig+0x2cc>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004352:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004356:	2bc0      	cmp	r3, #192	@ 0xc0
 8004358:	d013      	beq.n	8004382 <UART_SetConfig+0x1ba>
 800435a:	2bc0      	cmp	r3, #192	@ 0xc0
 800435c:	d814      	bhi.n	8004388 <UART_SetConfig+0x1c0>
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d009      	beq.n	8004376 <UART_SetConfig+0x1ae>
 8004362:	2b80      	cmp	r3, #128	@ 0x80
 8004364:	d810      	bhi.n	8004388 <UART_SetConfig+0x1c0>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <UART_SetConfig+0x1a8>
 800436a:	2b40      	cmp	r3, #64	@ 0x40
 800436c:	d006      	beq.n	800437c <UART_SetConfig+0x1b4>
 800436e:	e00b      	b.n	8004388 <UART_SetConfig+0x1c0>
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e0cc      	b.n	8004510 <UART_SetConfig+0x348>
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0c9      	b.n	8004510 <UART_SetConfig+0x348>
 800437c:	2304      	movs	r3, #4
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e0c6      	b.n	8004510 <UART_SetConfig+0x348>
 8004382:	2308      	movs	r3, #8
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e0c3      	b.n	8004510 <UART_SetConfig+0x348>
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e0c0      	b.n	8004510 <UART_SetConfig+0x348>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a44      	ldr	r2, [pc, #272]	@ (80044a4 <UART_SetConfig+0x2dc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d125      	bne.n	80043e4 <UART_SetConfig+0x21c>
 8004398:	4b3e      	ldr	r3, [pc, #248]	@ (8004494 <UART_SetConfig+0x2cc>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043a6:	d017      	beq.n	80043d8 <UART_SetConfig+0x210>
 80043a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ac:	d817      	bhi.n	80043de <UART_SetConfig+0x216>
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b2:	d00b      	beq.n	80043cc <UART_SetConfig+0x204>
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043b8:	d811      	bhi.n	80043de <UART_SetConfig+0x216>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <UART_SetConfig+0x1fe>
 80043be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c2:	d006      	beq.n	80043d2 <UART_SetConfig+0x20a>
 80043c4:	e00b      	b.n	80043de <UART_SetConfig+0x216>
 80043c6:	2300      	movs	r3, #0
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e0a1      	b.n	8004510 <UART_SetConfig+0x348>
 80043cc:	2302      	movs	r3, #2
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e09e      	b.n	8004510 <UART_SetConfig+0x348>
 80043d2:	2304      	movs	r3, #4
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e09b      	b.n	8004510 <UART_SetConfig+0x348>
 80043d8:	2308      	movs	r3, #8
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e098      	b.n	8004510 <UART_SetConfig+0x348>
 80043de:	2310      	movs	r3, #16
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e095      	b.n	8004510 <UART_SetConfig+0x348>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	@ (80044a8 <UART_SetConfig+0x2e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d125      	bne.n	800443a <UART_SetConfig+0x272>
 80043ee:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <UART_SetConfig+0x2cc>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043fc:	d017      	beq.n	800442e <UART_SetConfig+0x266>
 80043fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004402:	d817      	bhi.n	8004434 <UART_SetConfig+0x26c>
 8004404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004408:	d00b      	beq.n	8004422 <UART_SetConfig+0x25a>
 800440a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800440e:	d811      	bhi.n	8004434 <UART_SetConfig+0x26c>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <UART_SetConfig+0x254>
 8004414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004418:	d006      	beq.n	8004428 <UART_SetConfig+0x260>
 800441a:	e00b      	b.n	8004434 <UART_SetConfig+0x26c>
 800441c:	2301      	movs	r3, #1
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e076      	b.n	8004510 <UART_SetConfig+0x348>
 8004422:	2302      	movs	r3, #2
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e073      	b.n	8004510 <UART_SetConfig+0x348>
 8004428:	2304      	movs	r3, #4
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e070      	b.n	8004510 <UART_SetConfig+0x348>
 800442e:	2308      	movs	r3, #8
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e06d      	b.n	8004510 <UART_SetConfig+0x348>
 8004434:	2310      	movs	r3, #16
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e06a      	b.n	8004510 <UART_SetConfig+0x348>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1b      	ldr	r2, [pc, #108]	@ (80044ac <UART_SetConfig+0x2e4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d138      	bne.n	80044b6 <UART_SetConfig+0x2ee>
 8004444:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <UART_SetConfig+0x2cc>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800444e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004452:	d017      	beq.n	8004484 <UART_SetConfig+0x2bc>
 8004454:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004458:	d82a      	bhi.n	80044b0 <UART_SetConfig+0x2e8>
 800445a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800445e:	d00b      	beq.n	8004478 <UART_SetConfig+0x2b0>
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004464:	d824      	bhi.n	80044b0 <UART_SetConfig+0x2e8>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <UART_SetConfig+0x2aa>
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446e:	d006      	beq.n	800447e <UART_SetConfig+0x2b6>
 8004470:	e01e      	b.n	80044b0 <UART_SetConfig+0x2e8>
 8004472:	2300      	movs	r3, #0
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e04b      	b.n	8004510 <UART_SetConfig+0x348>
 8004478:	2302      	movs	r3, #2
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e048      	b.n	8004510 <UART_SetConfig+0x348>
 800447e:	2304      	movs	r3, #4
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e045      	b.n	8004510 <UART_SetConfig+0x348>
 8004484:	2308      	movs	r3, #8
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e042      	b.n	8004510 <UART_SetConfig+0x348>
 800448a:	bf00      	nop
 800448c:	efff69f3 	.word	0xefff69f3
 8004490:	40011000 	.word	0x40011000
 8004494:	40023800 	.word	0x40023800
 8004498:	40004400 	.word	0x40004400
 800449c:	40004800 	.word	0x40004800
 80044a0:	40004c00 	.word	0x40004c00
 80044a4:	40005000 	.word	0x40005000
 80044a8:	40011400 	.word	0x40011400
 80044ac:	40007800 	.word	0x40007800
 80044b0:	2310      	movs	r3, #16
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e02c      	b.n	8004510 <UART_SetConfig+0x348>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a72      	ldr	r2, [pc, #456]	@ (8004684 <UART_SetConfig+0x4bc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d125      	bne.n	800450c <UART_SetConfig+0x344>
 80044c0:	4b71      	ldr	r3, [pc, #452]	@ (8004688 <UART_SetConfig+0x4c0>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044ce:	d017      	beq.n	8004500 <UART_SetConfig+0x338>
 80044d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044d4:	d817      	bhi.n	8004506 <UART_SetConfig+0x33e>
 80044d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044da:	d00b      	beq.n	80044f4 <UART_SetConfig+0x32c>
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e0:	d811      	bhi.n	8004506 <UART_SetConfig+0x33e>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <UART_SetConfig+0x326>
 80044e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ea:	d006      	beq.n	80044fa <UART_SetConfig+0x332>
 80044ec:	e00b      	b.n	8004506 <UART_SetConfig+0x33e>
 80044ee:	2300      	movs	r3, #0
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e00d      	b.n	8004510 <UART_SetConfig+0x348>
 80044f4:	2302      	movs	r3, #2
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e00a      	b.n	8004510 <UART_SetConfig+0x348>
 80044fa:	2304      	movs	r3, #4
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e007      	b.n	8004510 <UART_SetConfig+0x348>
 8004500:	2308      	movs	r3, #8
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e004      	b.n	8004510 <UART_SetConfig+0x348>
 8004506:	2310      	movs	r3, #16
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e001      	b.n	8004510 <UART_SetConfig+0x348>
 800450c:	2310      	movs	r3, #16
 800450e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004518:	d15b      	bne.n	80045d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800451a:	7ffb      	ldrb	r3, [r7, #31]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d828      	bhi.n	8004572 <UART_SetConfig+0x3aa>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <UART_SetConfig+0x360>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004555 	.word	0x08004555
 8004530:	0800455d 	.word	0x0800455d
 8004534:	08004573 	.word	0x08004573
 8004538:	08004563 	.word	0x08004563
 800453c:	08004573 	.word	0x08004573
 8004540:	08004573 	.word	0x08004573
 8004544:	08004573 	.word	0x08004573
 8004548:	0800456b 	.word	0x0800456b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800454c:	f7fe f854 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8004550:	61b8      	str	r0, [r7, #24]
        break;
 8004552:	e013      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7fe f864 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8004558:	61b8      	str	r0, [r7, #24]
        break;
 800455a:	e00f      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800455c:	4b4b      	ldr	r3, [pc, #300]	@ (800468c <UART_SetConfig+0x4c4>)
 800455e:	61bb      	str	r3, [r7, #24]
        break;
 8004560:	e00c      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004562:	f7fd ff37 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8004566:	61b8      	str	r0, [r7, #24]
        break;
 8004568:	e008      	b.n	800457c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800456e:	61bb      	str	r3, [r7, #24]
        break;
 8004570:	e004      	b.n	800457c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	77bb      	strb	r3, [r7, #30]
        break;
 800457a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d074      	beq.n	800466c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	005a      	lsls	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	441a      	add	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	d916      	bls.n	80045cc <UART_SetConfig+0x404>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a4:	d212      	bcs.n	80045cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f023 030f 	bic.w	r3, r3, #15
 80045ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	89fb      	ldrh	r3, [r7, #14]
 80045be:	4313      	orrs	r3, r2
 80045c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	89fa      	ldrh	r2, [r7, #14]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	e04f      	b.n	800466c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	77bb      	strb	r3, [r7, #30]
 80045d0:	e04c      	b.n	800466c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d2:	7ffb      	ldrb	r3, [r7, #31]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d828      	bhi.n	800462a <UART_SetConfig+0x462>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <UART_SetConfig+0x418>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004615 	.word	0x08004615
 80045ec:	0800462b 	.word	0x0800462b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800462b 	.word	0x0800462b
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	0800462b 	.word	0x0800462b
 8004600:	08004623 	.word	0x08004623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7fd fff8 	bl	80025f8 <HAL_RCC_GetPCLK1Freq>
 8004608:	61b8      	str	r0, [r7, #24]
        break;
 800460a:	e013      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7fe f808 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8004610:	61b8      	str	r0, [r7, #24]
        break;
 8004612:	e00f      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b1d      	ldr	r3, [pc, #116]	@ (800468c <UART_SetConfig+0x4c4>)
 8004616:	61bb      	str	r3, [r7, #24]
        break;
 8004618:	e00c      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7fd fedb 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 800461e:	61b8      	str	r0, [r7, #24]
        break;
 8004620:	e008      	b.n	8004634 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004626:	61bb      	str	r3, [r7, #24]
        break;
 8004628:	e004      	b.n	8004634 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	77bb      	strb	r3, [r7, #30]
        break;
 8004632:	bf00      	nop
    }

    if (pclk != 0U)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	085a      	lsrs	r2, r3, #1
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	441a      	add	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b0f      	cmp	r3, #15
 8004652:	d909      	bls.n	8004668 <UART_SetConfig+0x4a0>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465a:	d205      	bcs.n	8004668 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	e001      	b.n	800466c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004678:	7fbb      	ldrb	r3, [r7, #30]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40007c00 	.word	0x40007c00
 8004688:	40023800 	.word	0x40023800
 800468c:	00f42400 	.word	0x00f42400

08004690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01a      	beq.n	80047a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800478e:	d10a      	bne.n	80047a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b098      	sub	sp, #96	@ 0x60
 80047d8:	af02      	add	r7, sp, #8
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e4:	f7fc ff18 	bl	8001618 <HAL_GetTick>
 80047e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d12e      	bne.n	8004856 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004800:	2200      	movs	r2, #0
 8004802:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f88c 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d021      	beq.n	8004856 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004826:	653b      	str	r3, [r7, #80]	@ 0x50
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
 8004832:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800483e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e6      	bne.n	8004812 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e062      	b.n	800491c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d149      	bne.n	80048f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004864:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486c:	2200      	movs	r2, #0
 800486e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f856 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d03c      	beq.n	80048f8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	623b      	str	r3, [r7, #32]
   return(result);
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489c:	633b      	str	r3, [r7, #48]	@ 0x30
 800489e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d0:	61fa      	str	r2, [r7, #28]
 80048d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	617b      	str	r3, [r7, #20]
   return(result);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e011      	b.n	800491c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3758      	adds	r7, #88	@ 0x58
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004934:	e04f      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d04b      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fc fe6b 	bl	8001618 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <UART_WaitOnFlagUntilTimeout+0x30>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e04e      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d037      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b80      	cmp	r3, #128	@ 0x80
 800496a:	d034      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b40      	cmp	r3, #64	@ 0x40
 8004970:	d031      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b08      	cmp	r3, #8
 800497e:	d110      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2208      	movs	r2, #8
 8004986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f838 	bl	80049fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2208      	movs	r2, #8
 8004992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e029      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049b0:	d111      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f81e 	bl	80049fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e00f      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d0a0      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b095      	sub	sp, #84	@ 0x54
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e6      	bne.n	8004a06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3308      	adds	r3, #8
 8004a56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e5      	bne.n	8004a38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d118      	bne.n	8004aa6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f023 0310 	bic.w	r3, r3, #16
 8004a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e6      	bne.n	8004a74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004aba:	bf00      	nop
 8004abc:	3754      	adds	r7, #84	@ 0x54
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <std>:
 8004ac8:	2300      	movs	r3, #0
 8004aca:	b510      	push	{r4, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	e9c0 3300 	strd	r3, r3, [r0]
 8004ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad6:	6083      	str	r3, [r0, #8]
 8004ad8:	8181      	strh	r1, [r0, #12]
 8004ada:	6643      	str	r3, [r0, #100]	@ 0x64
 8004adc:	81c2      	strh	r2, [r0, #14]
 8004ade:	6183      	str	r3, [r0, #24]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	305c      	adds	r0, #92	@ 0x5c
 8004ae6:	f000 f906 	bl	8004cf6 <memset>
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <std+0x58>)
 8004aec:	6263      	str	r3, [r4, #36]	@ 0x24
 8004aee:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <std+0x5c>)
 8004af0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004af2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b28 <std+0x60>)
 8004af4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <std+0x64>)
 8004af8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <std+0x68>)
 8004afc:	6224      	str	r4, [r4, #32]
 8004afe:	429c      	cmp	r4, r3
 8004b00:	d006      	beq.n	8004b10 <std+0x48>
 8004b02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b06:	4294      	cmp	r4, r2
 8004b08:	d002      	beq.n	8004b10 <std+0x48>
 8004b0a:	33d0      	adds	r3, #208	@ 0xd0
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	d105      	bne.n	8004b1c <std+0x54>
 8004b10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b18:	f000 b966 	b.w	8004de8 <__retarget_lock_init_recursive>
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	bf00      	nop
 8004b20:	08004c71 	.word	0x08004c71
 8004b24:	08004c93 	.word	0x08004c93
 8004b28:	08004ccb 	.word	0x08004ccb
 8004b2c:	08004cef 	.word	0x08004cef
 8004b30:	200002e4 	.word	0x200002e4

08004b34 <stdio_exit_handler>:
 8004b34:	4a02      	ldr	r2, [pc, #8]	@ (8004b40 <stdio_exit_handler+0xc>)
 8004b36:	4903      	ldr	r1, [pc, #12]	@ (8004b44 <stdio_exit_handler+0x10>)
 8004b38:	4803      	ldr	r0, [pc, #12]	@ (8004b48 <stdio_exit_handler+0x14>)
 8004b3a:	f000 b869 	b.w	8004c10 <_fwalk_sglue>
 8004b3e:	bf00      	nop
 8004b40:	2000000c 	.word	0x2000000c
 8004b44:	08005689 	.word	0x08005689
 8004b48:	2000001c 	.word	0x2000001c

08004b4c <cleanup_stdio>:
 8004b4c:	6841      	ldr	r1, [r0, #4]
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <cleanup_stdio+0x34>)
 8004b50:	4299      	cmp	r1, r3
 8004b52:	b510      	push	{r4, lr}
 8004b54:	4604      	mov	r4, r0
 8004b56:	d001      	beq.n	8004b5c <cleanup_stdio+0x10>
 8004b58:	f000 fd96 	bl	8005688 <_fflush_r>
 8004b5c:	68a1      	ldr	r1, [r4, #8]
 8004b5e:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <cleanup_stdio+0x38>)
 8004b60:	4299      	cmp	r1, r3
 8004b62:	d002      	beq.n	8004b6a <cleanup_stdio+0x1e>
 8004b64:	4620      	mov	r0, r4
 8004b66:	f000 fd8f 	bl	8005688 <_fflush_r>
 8004b6a:	68e1      	ldr	r1, [r4, #12]
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <cleanup_stdio+0x3c>)
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	d004      	beq.n	8004b7c <cleanup_stdio+0x30>
 8004b72:	4620      	mov	r0, r4
 8004b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b78:	f000 bd86 	b.w	8005688 <_fflush_r>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	200002e4 	.word	0x200002e4
 8004b84:	2000034c 	.word	0x2000034c
 8004b88:	200003b4 	.word	0x200003b4

08004b8c <global_stdio_init.part.0>:
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <global_stdio_init.part.0+0x30>)
 8004b90:	4c0b      	ldr	r4, [pc, #44]	@ (8004bc0 <global_stdio_init.part.0+0x34>)
 8004b92:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc4 <global_stdio_init.part.0+0x38>)
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	4620      	mov	r0, r4
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2104      	movs	r1, #4
 8004b9c:	f7ff ff94 	bl	8004ac8 <std>
 8004ba0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	2109      	movs	r1, #9
 8004ba8:	f7ff ff8e 	bl	8004ac8 <std>
 8004bac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb6:	2112      	movs	r1, #18
 8004bb8:	f7ff bf86 	b.w	8004ac8 <std>
 8004bbc:	2000041c 	.word	0x2000041c
 8004bc0:	200002e4 	.word	0x200002e4
 8004bc4:	08004b35 	.word	0x08004b35

08004bc8 <__sfp_lock_acquire>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	@ (8004bd0 <__sfp_lock_acquire+0x8>)
 8004bca:	f000 b90e 	b.w	8004dea <__retarget_lock_acquire_recursive>
 8004bce:	bf00      	nop
 8004bd0:	20000425 	.word	0x20000425

08004bd4 <__sfp_lock_release>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	@ (8004bdc <__sfp_lock_release+0x8>)
 8004bd6:	f000 b909 	b.w	8004dec <__retarget_lock_release_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20000425 	.word	0x20000425

08004be0 <__sinit>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4604      	mov	r4, r0
 8004be4:	f7ff fff0 	bl	8004bc8 <__sfp_lock_acquire>
 8004be8:	6a23      	ldr	r3, [r4, #32]
 8004bea:	b11b      	cbz	r3, 8004bf4 <__sinit+0x14>
 8004bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf0:	f7ff bff0 	b.w	8004bd4 <__sfp_lock_release>
 8004bf4:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <__sinit+0x28>)
 8004bf6:	6223      	str	r3, [r4, #32]
 8004bf8:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <__sinit+0x2c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f5      	bne.n	8004bec <__sinit+0xc>
 8004c00:	f7ff ffc4 	bl	8004b8c <global_stdio_init.part.0>
 8004c04:	e7f2      	b.n	8004bec <__sinit+0xc>
 8004c06:	bf00      	nop
 8004c08:	08004b4d 	.word	0x08004b4d
 8004c0c:	2000041c 	.word	0x2000041c

08004c10 <_fwalk_sglue>:
 8004c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c14:	4607      	mov	r7, r0
 8004c16:	4688      	mov	r8, r1
 8004c18:	4614      	mov	r4, r2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c20:	f1b9 0901 	subs.w	r9, r9, #1
 8004c24:	d505      	bpl.n	8004c32 <_fwalk_sglue+0x22>
 8004c26:	6824      	ldr	r4, [r4, #0]
 8004c28:	2c00      	cmp	r4, #0
 8004c2a:	d1f7      	bne.n	8004c1c <_fwalk_sglue+0xc>
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c32:	89ab      	ldrh	r3, [r5, #12]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d907      	bls.n	8004c48 <_fwalk_sglue+0x38>
 8004c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	d003      	beq.n	8004c48 <_fwalk_sglue+0x38>
 8004c40:	4629      	mov	r1, r5
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c0      	blx	r8
 8004c46:	4306      	orrs	r6, r0
 8004c48:	3568      	adds	r5, #104	@ 0x68
 8004c4a:	e7e9      	b.n	8004c20 <_fwalk_sglue+0x10>

08004c4c <iprintf>:
 8004c4c:	b40f      	push	{r0, r1, r2, r3}
 8004c4e:	b507      	push	{r0, r1, r2, lr}
 8004c50:	4906      	ldr	r1, [pc, #24]	@ (8004c6c <iprintf+0x20>)
 8004c52:	ab04      	add	r3, sp, #16
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c5a:	6881      	ldr	r1, [r0, #8]
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	f000 f9e9 	bl	8005034 <_vfiprintf_r>
 8004c62:	b003      	add	sp, #12
 8004c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c68:	b004      	add	sp, #16
 8004c6a:	4770      	bx	lr
 8004c6c:	20000018 	.word	0x20000018

08004c70 <__sread>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	460c      	mov	r4, r1
 8004c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c78:	f000 f868 	bl	8004d4c <_read_r>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	bfab      	itete	ge
 8004c80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c82:	89a3      	ldrhlt	r3, [r4, #12]
 8004c84:	181b      	addge	r3, r3, r0
 8004c86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c8a:	bfac      	ite	ge
 8004c8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c8e:	81a3      	strhlt	r3, [r4, #12]
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <__swrite>:
 8004c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	461f      	mov	r7, r3
 8004c98:	898b      	ldrh	r3, [r1, #12]
 8004c9a:	05db      	lsls	r3, r3, #23
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	4616      	mov	r6, r2
 8004ca2:	d505      	bpl.n	8004cb0 <__swrite+0x1e>
 8004ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca8:	2302      	movs	r3, #2
 8004caa:	2200      	movs	r2, #0
 8004cac:	f000 f83c 	bl	8004d28 <_lseek_r>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc6:	f000 b853 	b.w	8004d70 <_write_r>

08004cca <__sseek>:
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	460c      	mov	r4, r1
 8004cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd2:	f000 f829 	bl	8004d28 <_lseek_r>
 8004cd6:	1c43      	adds	r3, r0, #1
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	bf15      	itete	ne
 8004cdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ce2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ce6:	81a3      	strheq	r3, [r4, #12]
 8004ce8:	bf18      	it	ne
 8004cea:	81a3      	strhne	r3, [r4, #12]
 8004cec:	bd10      	pop	{r4, pc}

08004cee <__sclose>:
 8004cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf2:	f000 b809 	b.w	8004d08 <_close_r>

08004cf6 <memset>:
 8004cf6:	4402      	add	r2, r0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d100      	bne.n	8004d00 <memset+0xa>
 8004cfe:	4770      	bx	lr
 8004d00:	f803 1b01 	strb.w	r1, [r3], #1
 8004d04:	e7f9      	b.n	8004cfa <memset+0x4>
	...

08004d08 <_close_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d06      	ldr	r5, [pc, #24]	@ (8004d24 <_close_r+0x1c>)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	602b      	str	r3, [r5, #0]
 8004d14:	f7fc fb89 	bl	800142a <_close>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_close_r+0x1a>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_close_r+0x1a>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	20000420 	.word	0x20000420

08004d28 <_lseek_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d07      	ldr	r5, [pc, #28]	@ (8004d48 <_lseek_r+0x20>)
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	4608      	mov	r0, r1
 8004d30:	4611      	mov	r1, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fc fb9e 	bl	8001478 <_lseek>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_lseek_r+0x1e>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_lseek_r+0x1e>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000420 	.word	0x20000420

08004d4c <_read_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d07      	ldr	r5, [pc, #28]	@ (8004d6c <_read_r+0x20>)
 8004d50:	4604      	mov	r4, r0
 8004d52:	4608      	mov	r0, r1
 8004d54:	4611      	mov	r1, r2
 8004d56:	2200      	movs	r2, #0
 8004d58:	602a      	str	r2, [r5, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f7fc fb2c 	bl	80013b8 <_read>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_read_r+0x1e>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_read_r+0x1e>
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	20000420 	.word	0x20000420

08004d70 <_write_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4d07      	ldr	r5, [pc, #28]	@ (8004d90 <_write_r+0x20>)
 8004d74:	4604      	mov	r4, r0
 8004d76:	4608      	mov	r0, r1
 8004d78:	4611      	mov	r1, r2
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	602a      	str	r2, [r5, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f7fc fb37 	bl	80013f2 <_write>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d102      	bne.n	8004d8e <_write_r+0x1e>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	b103      	cbz	r3, 8004d8e <_write_r+0x1e>
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	20000420 	.word	0x20000420

08004d94 <__errno>:
 8004d94:	4b01      	ldr	r3, [pc, #4]	@ (8004d9c <__errno+0x8>)
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000018 	.word	0x20000018

08004da0 <__libc_init_array>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	4d0d      	ldr	r5, [pc, #52]	@ (8004dd8 <__libc_init_array+0x38>)
 8004da4:	4c0d      	ldr	r4, [pc, #52]	@ (8004ddc <__libc_init_array+0x3c>)
 8004da6:	1b64      	subs	r4, r4, r5
 8004da8:	10a4      	asrs	r4, r4, #2
 8004daa:	2600      	movs	r6, #0
 8004dac:	42a6      	cmp	r6, r4
 8004dae:	d109      	bne.n	8004dc4 <__libc_init_array+0x24>
 8004db0:	4d0b      	ldr	r5, [pc, #44]	@ (8004de0 <__libc_init_array+0x40>)
 8004db2:	4c0c      	ldr	r4, [pc, #48]	@ (8004de4 <__libc_init_array+0x44>)
 8004db4:	f000 fdb8 	bl	8005928 <_init>
 8004db8:	1b64      	subs	r4, r4, r5
 8004dba:	10a4      	asrs	r4, r4, #2
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	42a6      	cmp	r6, r4
 8004dc0:	d105      	bne.n	8004dce <__libc_init_array+0x2e>
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc8:	4798      	blx	r3
 8004dca:	3601      	adds	r6, #1
 8004dcc:	e7ee      	b.n	8004dac <__libc_init_array+0xc>
 8004dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd2:	4798      	blx	r3
 8004dd4:	3601      	adds	r6, #1
 8004dd6:	e7f2      	b.n	8004dbe <__libc_init_array+0x1e>
 8004dd8:	08005a04 	.word	0x08005a04
 8004ddc:	08005a04 	.word	0x08005a04
 8004de0:	08005a04 	.word	0x08005a04
 8004de4:	08005a08 	.word	0x08005a08

08004de8 <__retarget_lock_init_recursive>:
 8004de8:	4770      	bx	lr

08004dea <__retarget_lock_acquire_recursive>:
 8004dea:	4770      	bx	lr

08004dec <__retarget_lock_release_recursive>:
 8004dec:	4770      	bx	lr
	...

08004df0 <_free_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d041      	beq.n	8004e7c <_free_r+0x8c>
 8004df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfc:	1f0c      	subs	r4, r1, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb8      	it	lt
 8004e02:	18e4      	addlt	r4, r4, r3
 8004e04:	f000 f8e0 	bl	8004fc8 <__malloc_lock>
 8004e08:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <_free_r+0x90>)
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	b933      	cbnz	r3, 8004e1c <_free_r+0x2c>
 8004e0e:	6063      	str	r3, [r4, #4]
 8004e10:	6014      	str	r4, [r2, #0]
 8004e12:	4628      	mov	r0, r5
 8004e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e18:	f000 b8dc 	b.w	8004fd4 <__malloc_unlock>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d908      	bls.n	8004e32 <_free_r+0x42>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	1821      	adds	r1, r4, r0
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf01      	itttt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	1809      	addeq	r1, r1, r0
 8004e2e:	6021      	streq	r1, [r4, #0]
 8004e30:	e7ed      	b.n	8004e0e <_free_r+0x1e>
 8004e32:	461a      	mov	r2, r3
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b10b      	cbz	r3, 8004e3c <_free_r+0x4c>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d9fa      	bls.n	8004e32 <_free_r+0x42>
 8004e3c:	6811      	ldr	r1, [r2, #0]
 8004e3e:	1850      	adds	r0, r2, r1
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	d10b      	bne.n	8004e5c <_free_r+0x6c>
 8004e44:	6820      	ldr	r0, [r4, #0]
 8004e46:	4401      	add	r1, r0
 8004e48:	1850      	adds	r0, r2, r1
 8004e4a:	4283      	cmp	r3, r0
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	d1e0      	bne.n	8004e12 <_free_r+0x22>
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	6053      	str	r3, [r2, #4]
 8004e56:	4408      	add	r0, r1
 8004e58:	6010      	str	r0, [r2, #0]
 8004e5a:	e7da      	b.n	8004e12 <_free_r+0x22>
 8004e5c:	d902      	bls.n	8004e64 <_free_r+0x74>
 8004e5e:	230c      	movs	r3, #12
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	e7d6      	b.n	8004e12 <_free_r+0x22>
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	1821      	adds	r1, r4, r0
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	bf04      	itt	eq
 8004e6c:	6819      	ldreq	r1, [r3, #0]
 8004e6e:	685b      	ldreq	r3, [r3, #4]
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	bf04      	itt	eq
 8004e74:	1809      	addeq	r1, r1, r0
 8004e76:	6021      	streq	r1, [r4, #0]
 8004e78:	6054      	str	r4, [r2, #4]
 8004e7a:	e7ca      	b.n	8004e12 <_free_r+0x22>
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000042c 	.word	0x2000042c

08004e84 <sbrk_aligned>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec4 <sbrk_aligned+0x40>)
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6831      	ldr	r1, [r6, #0]
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	b911      	cbnz	r1, 8004e96 <sbrk_aligned+0x12>
 8004e90:	f000 fcb6 	bl	8005800 <_sbrk_r>
 8004e94:	6030      	str	r0, [r6, #0]
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fcb1 	bl	8005800 <_sbrk_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d103      	bne.n	8004eaa <sbrk_aligned+0x26>
 8004ea2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	1cc4      	adds	r4, r0, #3
 8004eac:	f024 0403 	bic.w	r4, r4, #3
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d0f8      	beq.n	8004ea6 <sbrk_aligned+0x22>
 8004eb4:	1a21      	subs	r1, r4, r0
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 fca2 	bl	8005800 <_sbrk_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1f2      	bne.n	8004ea6 <sbrk_aligned+0x22>
 8004ec0:	e7ef      	b.n	8004ea2 <sbrk_aligned+0x1e>
 8004ec2:	bf00      	nop
 8004ec4:	20000428 	.word	0x20000428

08004ec8 <_malloc_r>:
 8004ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ecc:	1ccd      	adds	r5, r1, #3
 8004ece:	f025 0503 	bic.w	r5, r5, #3
 8004ed2:	3508      	adds	r5, #8
 8004ed4:	2d0c      	cmp	r5, #12
 8004ed6:	bf38      	it	cc
 8004ed8:	250c      	movcc	r5, #12
 8004eda:	2d00      	cmp	r5, #0
 8004edc:	4606      	mov	r6, r0
 8004ede:	db01      	blt.n	8004ee4 <_malloc_r+0x1c>
 8004ee0:	42a9      	cmp	r1, r5
 8004ee2:	d904      	bls.n	8004eee <_malloc_r+0x26>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	6033      	str	r3, [r6, #0]
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc4 <_malloc_r+0xfc>
 8004ef2:	f000 f869 	bl	8004fc8 <__malloc_lock>
 8004ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8004efa:	461c      	mov	r4, r3
 8004efc:	bb44      	cbnz	r4, 8004f50 <_malloc_r+0x88>
 8004efe:	4629      	mov	r1, r5
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7ff ffbf 	bl	8004e84 <sbrk_aligned>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	4604      	mov	r4, r0
 8004f0a:	d158      	bne.n	8004fbe <_malloc_r+0xf6>
 8004f0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f10:	4627      	mov	r7, r4
 8004f12:	2f00      	cmp	r7, #0
 8004f14:	d143      	bne.n	8004f9e <_malloc_r+0xd6>
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	d04b      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	eb04 0903 	add.w	r9, r4, r3
 8004f24:	f000 fc6c 	bl	8005800 <_sbrk_r>
 8004f28:	4581      	cmp	r9, r0
 8004f2a:	d142      	bne.n	8004fb2 <_malloc_r+0xea>
 8004f2c:	6821      	ldr	r1, [r4, #0]
 8004f2e:	1a6d      	subs	r5, r5, r1
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffa6 	bl	8004e84 <sbrk_aligned>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d03a      	beq.n	8004fb2 <_malloc_r+0xea>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	442b      	add	r3, r5
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	f8d8 3000 	ldr.w	r3, [r8]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	bb62      	cbnz	r2, 8004fa4 <_malloc_r+0xdc>
 8004f4a:	f8c8 7000 	str.w	r7, [r8]
 8004f4e:	e00f      	b.n	8004f70 <_malloc_r+0xa8>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	1b52      	subs	r2, r2, r5
 8004f54:	d420      	bmi.n	8004f98 <_malloc_r+0xd0>
 8004f56:	2a0b      	cmp	r2, #11
 8004f58:	d917      	bls.n	8004f8a <_malloc_r+0xc2>
 8004f5a:	1961      	adds	r1, r4, r5
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	bf18      	it	ne
 8004f62:	6059      	strne	r1, [r3, #4]
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	bf08      	it	eq
 8004f68:	f8c8 1000 	streq.w	r1, [r8]
 8004f6c:	5162      	str	r2, [r4, r5]
 8004f6e:	604b      	str	r3, [r1, #4]
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 f82f 	bl	8004fd4 <__malloc_unlock>
 8004f76:	f104 000b 	add.w	r0, r4, #11
 8004f7a:	1d23      	adds	r3, r4, #4
 8004f7c:	f020 0007 	bic.w	r0, r0, #7
 8004f80:	1ac2      	subs	r2, r0, r3
 8004f82:	bf1c      	itt	ne
 8004f84:	1a1b      	subne	r3, r3, r0
 8004f86:	50a3      	strne	r3, [r4, r2]
 8004f88:	e7af      	b.n	8004eea <_malloc_r+0x22>
 8004f8a:	6862      	ldr	r2, [r4, #4]
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	bf0c      	ite	eq
 8004f90:	f8c8 2000 	streq.w	r2, [r8]
 8004f94:	605a      	strne	r2, [r3, #4]
 8004f96:	e7eb      	b.n	8004f70 <_malloc_r+0xa8>
 8004f98:	4623      	mov	r3, r4
 8004f9a:	6864      	ldr	r4, [r4, #4]
 8004f9c:	e7ae      	b.n	8004efc <_malloc_r+0x34>
 8004f9e:	463c      	mov	r4, r7
 8004fa0:	687f      	ldr	r7, [r7, #4]
 8004fa2:	e7b6      	b.n	8004f12 <_malloc_r+0x4a>
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d1fb      	bne.n	8004fa4 <_malloc_r+0xdc>
 8004fac:	2300      	movs	r3, #0
 8004fae:	6053      	str	r3, [r2, #4]
 8004fb0:	e7de      	b.n	8004f70 <_malloc_r+0xa8>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f000 f80c 	bl	8004fd4 <__malloc_unlock>
 8004fbc:	e794      	b.n	8004ee8 <_malloc_r+0x20>
 8004fbe:	6005      	str	r5, [r0, #0]
 8004fc0:	e7d6      	b.n	8004f70 <_malloc_r+0xa8>
 8004fc2:	bf00      	nop
 8004fc4:	2000042c 	.word	0x2000042c

08004fc8 <__malloc_lock>:
 8004fc8:	4801      	ldr	r0, [pc, #4]	@ (8004fd0 <__malloc_lock+0x8>)
 8004fca:	f7ff bf0e 	b.w	8004dea <__retarget_lock_acquire_recursive>
 8004fce:	bf00      	nop
 8004fd0:	20000424 	.word	0x20000424

08004fd4 <__malloc_unlock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	@ (8004fdc <__malloc_unlock+0x8>)
 8004fd6:	f7ff bf09 	b.w	8004dec <__retarget_lock_release_recursive>
 8004fda:	bf00      	nop
 8004fdc:	20000424 	.word	0x20000424

08004fe0 <__sfputc_r>:
 8004fe0:	6893      	ldr	r3, [r2, #8]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	b410      	push	{r4}
 8004fe8:	6093      	str	r3, [r2, #8]
 8004fea:	da08      	bge.n	8004ffe <__sfputc_r+0x1e>
 8004fec:	6994      	ldr	r4, [r2, #24]
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	db01      	blt.n	8004ff6 <__sfputc_r+0x16>
 8004ff2:	290a      	cmp	r1, #10
 8004ff4:	d103      	bne.n	8004ffe <__sfputc_r+0x1e>
 8004ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ffa:	f000 bb6d 	b.w	80056d8 <__swbuf_r>
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	1c58      	adds	r0, r3, #1
 8005002:	6010      	str	r0, [r2, #0]
 8005004:	7019      	strb	r1, [r3, #0]
 8005006:	4608      	mov	r0, r1
 8005008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800500c:	4770      	bx	lr

0800500e <__sfputs_r>:
 800500e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005010:	4606      	mov	r6, r0
 8005012:	460f      	mov	r7, r1
 8005014:	4614      	mov	r4, r2
 8005016:	18d5      	adds	r5, r2, r3
 8005018:	42ac      	cmp	r4, r5
 800501a:	d101      	bne.n	8005020 <__sfputs_r+0x12>
 800501c:	2000      	movs	r0, #0
 800501e:	e007      	b.n	8005030 <__sfputs_r+0x22>
 8005020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005024:	463a      	mov	r2, r7
 8005026:	4630      	mov	r0, r6
 8005028:	f7ff ffda 	bl	8004fe0 <__sfputc_r>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d1f3      	bne.n	8005018 <__sfputs_r+0xa>
 8005030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005034 <_vfiprintf_r>:
 8005034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005038:	460d      	mov	r5, r1
 800503a:	b09d      	sub	sp, #116	@ 0x74
 800503c:	4614      	mov	r4, r2
 800503e:	4698      	mov	r8, r3
 8005040:	4606      	mov	r6, r0
 8005042:	b118      	cbz	r0, 800504c <_vfiprintf_r+0x18>
 8005044:	6a03      	ldr	r3, [r0, #32]
 8005046:	b90b      	cbnz	r3, 800504c <_vfiprintf_r+0x18>
 8005048:	f7ff fdca 	bl	8004be0 <__sinit>
 800504c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800504e:	07d9      	lsls	r1, r3, #31
 8005050:	d405      	bmi.n	800505e <_vfiprintf_r+0x2a>
 8005052:	89ab      	ldrh	r3, [r5, #12]
 8005054:	059a      	lsls	r2, r3, #22
 8005056:	d402      	bmi.n	800505e <_vfiprintf_r+0x2a>
 8005058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800505a:	f7ff fec6 	bl	8004dea <__retarget_lock_acquire_recursive>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	071b      	lsls	r3, r3, #28
 8005062:	d501      	bpl.n	8005068 <_vfiprintf_r+0x34>
 8005064:	692b      	ldr	r3, [r5, #16]
 8005066:	b99b      	cbnz	r3, 8005090 <_vfiprintf_r+0x5c>
 8005068:	4629      	mov	r1, r5
 800506a:	4630      	mov	r0, r6
 800506c:	f000 fb72 	bl	8005754 <__swsetup_r>
 8005070:	b170      	cbz	r0, 8005090 <_vfiprintf_r+0x5c>
 8005072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005074:	07dc      	lsls	r4, r3, #31
 8005076:	d504      	bpl.n	8005082 <_vfiprintf_r+0x4e>
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	b01d      	add	sp, #116	@ 0x74
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	0598      	lsls	r0, r3, #22
 8005086:	d4f7      	bmi.n	8005078 <_vfiprintf_r+0x44>
 8005088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800508a:	f7ff feaf 	bl	8004dec <__retarget_lock_release_recursive>
 800508e:	e7f3      	b.n	8005078 <_vfiprintf_r+0x44>
 8005090:	2300      	movs	r3, #0
 8005092:	9309      	str	r3, [sp, #36]	@ 0x24
 8005094:	2320      	movs	r3, #32
 8005096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800509a:	f8cd 800c 	str.w	r8, [sp, #12]
 800509e:	2330      	movs	r3, #48	@ 0x30
 80050a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005250 <_vfiprintf_r+0x21c>
 80050a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050a8:	f04f 0901 	mov.w	r9, #1
 80050ac:	4623      	mov	r3, r4
 80050ae:	469a      	mov	sl, r3
 80050b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b4:	b10a      	cbz	r2, 80050ba <_vfiprintf_r+0x86>
 80050b6:	2a25      	cmp	r2, #37	@ 0x25
 80050b8:	d1f9      	bne.n	80050ae <_vfiprintf_r+0x7a>
 80050ba:	ebba 0b04 	subs.w	fp, sl, r4
 80050be:	d00b      	beq.n	80050d8 <_vfiprintf_r+0xa4>
 80050c0:	465b      	mov	r3, fp
 80050c2:	4622      	mov	r2, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7ff ffa1 	bl	800500e <__sfputs_r>
 80050cc:	3001      	adds	r0, #1
 80050ce:	f000 80a7 	beq.w	8005220 <_vfiprintf_r+0x1ec>
 80050d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050d4:	445a      	add	r2, fp
 80050d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80050d8:	f89a 3000 	ldrb.w	r3, [sl]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 809f 	beq.w	8005220 <_vfiprintf_r+0x1ec>
 80050e2:	2300      	movs	r3, #0
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ec:	f10a 0a01 	add.w	sl, sl, #1
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	9307      	str	r3, [sp, #28]
 80050f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80050fa:	4654      	mov	r4, sl
 80050fc:	2205      	movs	r2, #5
 80050fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005102:	4853      	ldr	r0, [pc, #332]	@ (8005250 <_vfiprintf_r+0x21c>)
 8005104:	f7fb f89c 	bl	8000240 <memchr>
 8005108:	9a04      	ldr	r2, [sp, #16]
 800510a:	b9d8      	cbnz	r0, 8005144 <_vfiprintf_r+0x110>
 800510c:	06d1      	lsls	r1, r2, #27
 800510e:	bf44      	itt	mi
 8005110:	2320      	movmi	r3, #32
 8005112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005116:	0713      	lsls	r3, r2, #28
 8005118:	bf44      	itt	mi
 800511a:	232b      	movmi	r3, #43	@ 0x2b
 800511c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005120:	f89a 3000 	ldrb.w	r3, [sl]
 8005124:	2b2a      	cmp	r3, #42	@ 0x2a
 8005126:	d015      	beq.n	8005154 <_vfiprintf_r+0x120>
 8005128:	9a07      	ldr	r2, [sp, #28]
 800512a:	4654      	mov	r4, sl
 800512c:	2000      	movs	r0, #0
 800512e:	f04f 0c0a 	mov.w	ip, #10
 8005132:	4621      	mov	r1, r4
 8005134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005138:	3b30      	subs	r3, #48	@ 0x30
 800513a:	2b09      	cmp	r3, #9
 800513c:	d94b      	bls.n	80051d6 <_vfiprintf_r+0x1a2>
 800513e:	b1b0      	cbz	r0, 800516e <_vfiprintf_r+0x13a>
 8005140:	9207      	str	r2, [sp, #28]
 8005142:	e014      	b.n	800516e <_vfiprintf_r+0x13a>
 8005144:	eba0 0308 	sub.w	r3, r0, r8
 8005148:	fa09 f303 	lsl.w	r3, r9, r3
 800514c:	4313      	orrs	r3, r2
 800514e:	9304      	str	r3, [sp, #16]
 8005150:	46a2      	mov	sl, r4
 8005152:	e7d2      	b.n	80050fa <_vfiprintf_r+0xc6>
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	1d19      	adds	r1, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	9103      	str	r1, [sp, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	bfbb      	ittet	lt
 8005160:	425b      	neglt	r3, r3
 8005162:	f042 0202 	orrlt.w	r2, r2, #2
 8005166:	9307      	strge	r3, [sp, #28]
 8005168:	9307      	strlt	r3, [sp, #28]
 800516a:	bfb8      	it	lt
 800516c:	9204      	strlt	r2, [sp, #16]
 800516e:	7823      	ldrb	r3, [r4, #0]
 8005170:	2b2e      	cmp	r3, #46	@ 0x2e
 8005172:	d10a      	bne.n	800518a <_vfiprintf_r+0x156>
 8005174:	7863      	ldrb	r3, [r4, #1]
 8005176:	2b2a      	cmp	r3, #42	@ 0x2a
 8005178:	d132      	bne.n	80051e0 <_vfiprintf_r+0x1ac>
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	9203      	str	r2, [sp, #12]
 8005182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005186:	3402      	adds	r4, #2
 8005188:	9305      	str	r3, [sp, #20]
 800518a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005260 <_vfiprintf_r+0x22c>
 800518e:	7821      	ldrb	r1, [r4, #0]
 8005190:	2203      	movs	r2, #3
 8005192:	4650      	mov	r0, sl
 8005194:	f7fb f854 	bl	8000240 <memchr>
 8005198:	b138      	cbz	r0, 80051aa <_vfiprintf_r+0x176>
 800519a:	9b04      	ldr	r3, [sp, #16]
 800519c:	eba0 000a 	sub.w	r0, r0, sl
 80051a0:	2240      	movs	r2, #64	@ 0x40
 80051a2:	4082      	lsls	r2, r0
 80051a4:	4313      	orrs	r3, r2
 80051a6:	3401      	adds	r4, #1
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ae:	4829      	ldr	r0, [pc, #164]	@ (8005254 <_vfiprintf_r+0x220>)
 80051b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051b4:	2206      	movs	r2, #6
 80051b6:	f7fb f843 	bl	8000240 <memchr>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d03f      	beq.n	800523e <_vfiprintf_r+0x20a>
 80051be:	4b26      	ldr	r3, [pc, #152]	@ (8005258 <_vfiprintf_r+0x224>)
 80051c0:	bb1b      	cbnz	r3, 800520a <_vfiprintf_r+0x1d6>
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	3307      	adds	r3, #7
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	3308      	adds	r3, #8
 80051cc:	9303      	str	r3, [sp, #12]
 80051ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d0:	443b      	add	r3, r7
 80051d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051d4:	e76a      	b.n	80050ac <_vfiprintf_r+0x78>
 80051d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80051da:	460c      	mov	r4, r1
 80051dc:	2001      	movs	r0, #1
 80051de:	e7a8      	b.n	8005132 <_vfiprintf_r+0xfe>
 80051e0:	2300      	movs	r3, #0
 80051e2:	3401      	adds	r4, #1
 80051e4:	9305      	str	r3, [sp, #20]
 80051e6:	4619      	mov	r1, r3
 80051e8:	f04f 0c0a 	mov.w	ip, #10
 80051ec:	4620      	mov	r0, r4
 80051ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f2:	3a30      	subs	r2, #48	@ 0x30
 80051f4:	2a09      	cmp	r2, #9
 80051f6:	d903      	bls.n	8005200 <_vfiprintf_r+0x1cc>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0c6      	beq.n	800518a <_vfiprintf_r+0x156>
 80051fc:	9105      	str	r1, [sp, #20]
 80051fe:	e7c4      	b.n	800518a <_vfiprintf_r+0x156>
 8005200:	fb0c 2101 	mla	r1, ip, r1, r2
 8005204:	4604      	mov	r4, r0
 8005206:	2301      	movs	r3, #1
 8005208:	e7f0      	b.n	80051ec <_vfiprintf_r+0x1b8>
 800520a:	ab03      	add	r3, sp, #12
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	462a      	mov	r2, r5
 8005210:	4b12      	ldr	r3, [pc, #72]	@ (800525c <_vfiprintf_r+0x228>)
 8005212:	a904      	add	r1, sp, #16
 8005214:	4630      	mov	r0, r6
 8005216:	f3af 8000 	nop.w
 800521a:	4607      	mov	r7, r0
 800521c:	1c78      	adds	r0, r7, #1
 800521e:	d1d6      	bne.n	80051ce <_vfiprintf_r+0x19a>
 8005220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005222:	07d9      	lsls	r1, r3, #31
 8005224:	d405      	bmi.n	8005232 <_vfiprintf_r+0x1fe>
 8005226:	89ab      	ldrh	r3, [r5, #12]
 8005228:	059a      	lsls	r2, r3, #22
 800522a:	d402      	bmi.n	8005232 <_vfiprintf_r+0x1fe>
 800522c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800522e:	f7ff fddd 	bl	8004dec <__retarget_lock_release_recursive>
 8005232:	89ab      	ldrh	r3, [r5, #12]
 8005234:	065b      	lsls	r3, r3, #25
 8005236:	f53f af1f 	bmi.w	8005078 <_vfiprintf_r+0x44>
 800523a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800523c:	e71e      	b.n	800507c <_vfiprintf_r+0x48>
 800523e:	ab03      	add	r3, sp, #12
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	462a      	mov	r2, r5
 8005244:	4b05      	ldr	r3, [pc, #20]	@ (800525c <_vfiprintf_r+0x228>)
 8005246:	a904      	add	r1, sp, #16
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f879 	bl	8005340 <_printf_i>
 800524e:	e7e4      	b.n	800521a <_vfiprintf_r+0x1e6>
 8005250:	080059c8 	.word	0x080059c8
 8005254:	080059d2 	.word	0x080059d2
 8005258:	00000000 	.word	0x00000000
 800525c:	0800500f 	.word	0x0800500f
 8005260:	080059ce 	.word	0x080059ce

08005264 <_printf_common>:
 8005264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	4616      	mov	r6, r2
 800526a:	4698      	mov	r8, r3
 800526c:	688a      	ldr	r2, [r1, #8]
 800526e:	690b      	ldr	r3, [r1, #16]
 8005270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005274:	4293      	cmp	r3, r2
 8005276:	bfb8      	it	lt
 8005278:	4613      	movlt	r3, r2
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005280:	4607      	mov	r7, r0
 8005282:	460c      	mov	r4, r1
 8005284:	b10a      	cbz	r2, 800528a <_printf_common+0x26>
 8005286:	3301      	adds	r3, #1
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	0699      	lsls	r1, r3, #26
 800528e:	bf42      	ittt	mi
 8005290:	6833      	ldrmi	r3, [r6, #0]
 8005292:	3302      	addmi	r3, #2
 8005294:	6033      	strmi	r3, [r6, #0]
 8005296:	6825      	ldr	r5, [r4, #0]
 8005298:	f015 0506 	ands.w	r5, r5, #6
 800529c:	d106      	bne.n	80052ac <_printf_common+0x48>
 800529e:	f104 0a19 	add.w	sl, r4, #25
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	6832      	ldr	r2, [r6, #0]
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	42ab      	cmp	r3, r5
 80052aa:	dc26      	bgt.n	80052fa <_printf_common+0x96>
 80052ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052b0:	6822      	ldr	r2, [r4, #0]
 80052b2:	3b00      	subs	r3, #0
 80052b4:	bf18      	it	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	0692      	lsls	r2, r2, #26
 80052ba:	d42b      	bmi.n	8005314 <_printf_common+0xb0>
 80052bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052c0:	4641      	mov	r1, r8
 80052c2:	4638      	mov	r0, r7
 80052c4:	47c8      	blx	r9
 80052c6:	3001      	adds	r0, #1
 80052c8:	d01e      	beq.n	8005308 <_printf_common+0xa4>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	f003 0306 	and.w	r3, r3, #6
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	bf02      	ittt	eq
 80052d6:	68e5      	ldreq	r5, [r4, #12]
 80052d8:	6833      	ldreq	r3, [r6, #0]
 80052da:	1aed      	subeq	r5, r5, r3
 80052dc:	68a3      	ldr	r3, [r4, #8]
 80052de:	bf0c      	ite	eq
 80052e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052e4:	2500      	movne	r5, #0
 80052e6:	4293      	cmp	r3, r2
 80052e8:	bfc4      	itt	gt
 80052ea:	1a9b      	subgt	r3, r3, r2
 80052ec:	18ed      	addgt	r5, r5, r3
 80052ee:	2600      	movs	r6, #0
 80052f0:	341a      	adds	r4, #26
 80052f2:	42b5      	cmp	r5, r6
 80052f4:	d11a      	bne.n	800532c <_printf_common+0xc8>
 80052f6:	2000      	movs	r0, #0
 80052f8:	e008      	b.n	800530c <_printf_common+0xa8>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4652      	mov	r2, sl
 80052fe:	4641      	mov	r1, r8
 8005300:	4638      	mov	r0, r7
 8005302:	47c8      	blx	r9
 8005304:	3001      	adds	r0, #1
 8005306:	d103      	bne.n	8005310 <_printf_common+0xac>
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	3501      	adds	r5, #1
 8005312:	e7c6      	b.n	80052a2 <_printf_common+0x3e>
 8005314:	18e1      	adds	r1, r4, r3
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	2030      	movs	r0, #48	@ 0x30
 800531a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800531e:	4422      	add	r2, r4
 8005320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005328:	3302      	adds	r3, #2
 800532a:	e7c7      	b.n	80052bc <_printf_common+0x58>
 800532c:	2301      	movs	r3, #1
 800532e:	4622      	mov	r2, r4
 8005330:	4641      	mov	r1, r8
 8005332:	4638      	mov	r0, r7
 8005334:	47c8      	blx	r9
 8005336:	3001      	adds	r0, #1
 8005338:	d0e6      	beq.n	8005308 <_printf_common+0xa4>
 800533a:	3601      	adds	r6, #1
 800533c:	e7d9      	b.n	80052f2 <_printf_common+0x8e>
	...

08005340 <_printf_i>:
 8005340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	7e0f      	ldrb	r7, [r1, #24]
 8005346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005348:	2f78      	cmp	r7, #120	@ 0x78
 800534a:	4691      	mov	r9, r2
 800534c:	4680      	mov	r8, r0
 800534e:	460c      	mov	r4, r1
 8005350:	469a      	mov	sl, r3
 8005352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005356:	d807      	bhi.n	8005368 <_printf_i+0x28>
 8005358:	2f62      	cmp	r7, #98	@ 0x62
 800535a:	d80a      	bhi.n	8005372 <_printf_i+0x32>
 800535c:	2f00      	cmp	r7, #0
 800535e:	f000 80d2 	beq.w	8005506 <_printf_i+0x1c6>
 8005362:	2f58      	cmp	r7, #88	@ 0x58
 8005364:	f000 80b9 	beq.w	80054da <_printf_i+0x19a>
 8005368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800536c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005370:	e03a      	b.n	80053e8 <_printf_i+0xa8>
 8005372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005376:	2b15      	cmp	r3, #21
 8005378:	d8f6      	bhi.n	8005368 <_printf_i+0x28>
 800537a:	a101      	add	r1, pc, #4	@ (adr r1, 8005380 <_printf_i+0x40>)
 800537c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005380:	080053d9 	.word	0x080053d9
 8005384:	080053ed 	.word	0x080053ed
 8005388:	08005369 	.word	0x08005369
 800538c:	08005369 	.word	0x08005369
 8005390:	08005369 	.word	0x08005369
 8005394:	08005369 	.word	0x08005369
 8005398:	080053ed 	.word	0x080053ed
 800539c:	08005369 	.word	0x08005369
 80053a0:	08005369 	.word	0x08005369
 80053a4:	08005369 	.word	0x08005369
 80053a8:	08005369 	.word	0x08005369
 80053ac:	080054ed 	.word	0x080054ed
 80053b0:	08005417 	.word	0x08005417
 80053b4:	080054a7 	.word	0x080054a7
 80053b8:	08005369 	.word	0x08005369
 80053bc:	08005369 	.word	0x08005369
 80053c0:	0800550f 	.word	0x0800550f
 80053c4:	08005369 	.word	0x08005369
 80053c8:	08005417 	.word	0x08005417
 80053cc:	08005369 	.word	0x08005369
 80053d0:	08005369 	.word	0x08005369
 80053d4:	080054af 	.word	0x080054af
 80053d8:	6833      	ldr	r3, [r6, #0]
 80053da:	1d1a      	adds	r2, r3, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6032      	str	r2, [r6, #0]
 80053e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053e8:	2301      	movs	r3, #1
 80053ea:	e09d      	b.n	8005528 <_printf_i+0x1e8>
 80053ec:	6833      	ldr	r3, [r6, #0]
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	1d19      	adds	r1, r3, #4
 80053f2:	6031      	str	r1, [r6, #0]
 80053f4:	0606      	lsls	r6, r0, #24
 80053f6:	d501      	bpl.n	80053fc <_printf_i+0xbc>
 80053f8:	681d      	ldr	r5, [r3, #0]
 80053fa:	e003      	b.n	8005404 <_printf_i+0xc4>
 80053fc:	0645      	lsls	r5, r0, #25
 80053fe:	d5fb      	bpl.n	80053f8 <_printf_i+0xb8>
 8005400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005404:	2d00      	cmp	r5, #0
 8005406:	da03      	bge.n	8005410 <_printf_i+0xd0>
 8005408:	232d      	movs	r3, #45	@ 0x2d
 800540a:	426d      	negs	r5, r5
 800540c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005410:	4859      	ldr	r0, [pc, #356]	@ (8005578 <_printf_i+0x238>)
 8005412:	230a      	movs	r3, #10
 8005414:	e011      	b.n	800543a <_printf_i+0xfa>
 8005416:	6821      	ldr	r1, [r4, #0]
 8005418:	6833      	ldr	r3, [r6, #0]
 800541a:	0608      	lsls	r0, r1, #24
 800541c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005420:	d402      	bmi.n	8005428 <_printf_i+0xe8>
 8005422:	0649      	lsls	r1, r1, #25
 8005424:	bf48      	it	mi
 8005426:	b2ad      	uxthmi	r5, r5
 8005428:	2f6f      	cmp	r7, #111	@ 0x6f
 800542a:	4853      	ldr	r0, [pc, #332]	@ (8005578 <_printf_i+0x238>)
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	bf14      	ite	ne
 8005430:	230a      	movne	r3, #10
 8005432:	2308      	moveq	r3, #8
 8005434:	2100      	movs	r1, #0
 8005436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800543a:	6866      	ldr	r6, [r4, #4]
 800543c:	60a6      	str	r6, [r4, #8]
 800543e:	2e00      	cmp	r6, #0
 8005440:	bfa2      	ittt	ge
 8005442:	6821      	ldrge	r1, [r4, #0]
 8005444:	f021 0104 	bicge.w	r1, r1, #4
 8005448:	6021      	strge	r1, [r4, #0]
 800544a:	b90d      	cbnz	r5, 8005450 <_printf_i+0x110>
 800544c:	2e00      	cmp	r6, #0
 800544e:	d04b      	beq.n	80054e8 <_printf_i+0x1a8>
 8005450:	4616      	mov	r6, r2
 8005452:	fbb5 f1f3 	udiv	r1, r5, r3
 8005456:	fb03 5711 	mls	r7, r3, r1, r5
 800545a:	5dc7      	ldrb	r7, [r0, r7]
 800545c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005460:	462f      	mov	r7, r5
 8005462:	42bb      	cmp	r3, r7
 8005464:	460d      	mov	r5, r1
 8005466:	d9f4      	bls.n	8005452 <_printf_i+0x112>
 8005468:	2b08      	cmp	r3, #8
 800546a:	d10b      	bne.n	8005484 <_printf_i+0x144>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	07df      	lsls	r7, r3, #31
 8005470:	d508      	bpl.n	8005484 <_printf_i+0x144>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	6861      	ldr	r1, [r4, #4]
 8005476:	4299      	cmp	r1, r3
 8005478:	bfde      	ittt	le
 800547a:	2330      	movle	r3, #48	@ 0x30
 800547c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005480:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005484:	1b92      	subs	r2, r2, r6
 8005486:	6122      	str	r2, [r4, #16]
 8005488:	f8cd a000 	str.w	sl, [sp]
 800548c:	464b      	mov	r3, r9
 800548e:	aa03      	add	r2, sp, #12
 8005490:	4621      	mov	r1, r4
 8005492:	4640      	mov	r0, r8
 8005494:	f7ff fee6 	bl	8005264 <_printf_common>
 8005498:	3001      	adds	r0, #1
 800549a:	d14a      	bne.n	8005532 <_printf_i+0x1f2>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	b004      	add	sp, #16
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	4833      	ldr	r0, [pc, #204]	@ (800557c <_printf_i+0x23c>)
 80054b0:	2778      	movs	r7, #120	@ 0x78
 80054b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	6831      	ldr	r1, [r6, #0]
 80054ba:	061f      	lsls	r7, r3, #24
 80054bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80054c0:	d402      	bmi.n	80054c8 <_printf_i+0x188>
 80054c2:	065f      	lsls	r7, r3, #25
 80054c4:	bf48      	it	mi
 80054c6:	b2ad      	uxthmi	r5, r5
 80054c8:	6031      	str	r1, [r6, #0]
 80054ca:	07d9      	lsls	r1, r3, #31
 80054cc:	bf44      	itt	mi
 80054ce:	f043 0320 	orrmi.w	r3, r3, #32
 80054d2:	6023      	strmi	r3, [r4, #0]
 80054d4:	b11d      	cbz	r5, 80054de <_printf_i+0x19e>
 80054d6:	2310      	movs	r3, #16
 80054d8:	e7ac      	b.n	8005434 <_printf_i+0xf4>
 80054da:	4827      	ldr	r0, [pc, #156]	@ (8005578 <_printf_i+0x238>)
 80054dc:	e7e9      	b.n	80054b2 <_printf_i+0x172>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	f023 0320 	bic.w	r3, r3, #32
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	e7f6      	b.n	80054d6 <_printf_i+0x196>
 80054e8:	4616      	mov	r6, r2
 80054ea:	e7bd      	b.n	8005468 <_printf_i+0x128>
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	6825      	ldr	r5, [r4, #0]
 80054f0:	6961      	ldr	r1, [r4, #20]
 80054f2:	1d18      	adds	r0, r3, #4
 80054f4:	6030      	str	r0, [r6, #0]
 80054f6:	062e      	lsls	r6, r5, #24
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	d501      	bpl.n	8005500 <_printf_i+0x1c0>
 80054fc:	6019      	str	r1, [r3, #0]
 80054fe:	e002      	b.n	8005506 <_printf_i+0x1c6>
 8005500:	0668      	lsls	r0, r5, #25
 8005502:	d5fb      	bpl.n	80054fc <_printf_i+0x1bc>
 8005504:	8019      	strh	r1, [r3, #0]
 8005506:	2300      	movs	r3, #0
 8005508:	6123      	str	r3, [r4, #16]
 800550a:	4616      	mov	r6, r2
 800550c:	e7bc      	b.n	8005488 <_printf_i+0x148>
 800550e:	6833      	ldr	r3, [r6, #0]
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	6032      	str	r2, [r6, #0]
 8005514:	681e      	ldr	r6, [r3, #0]
 8005516:	6862      	ldr	r2, [r4, #4]
 8005518:	2100      	movs	r1, #0
 800551a:	4630      	mov	r0, r6
 800551c:	f7fa fe90 	bl	8000240 <memchr>
 8005520:	b108      	cbz	r0, 8005526 <_printf_i+0x1e6>
 8005522:	1b80      	subs	r0, r0, r6
 8005524:	6060      	str	r0, [r4, #4]
 8005526:	6863      	ldr	r3, [r4, #4]
 8005528:	6123      	str	r3, [r4, #16]
 800552a:	2300      	movs	r3, #0
 800552c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005530:	e7aa      	b.n	8005488 <_printf_i+0x148>
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	4632      	mov	r2, r6
 8005536:	4649      	mov	r1, r9
 8005538:	4640      	mov	r0, r8
 800553a:	47d0      	blx	sl
 800553c:	3001      	adds	r0, #1
 800553e:	d0ad      	beq.n	800549c <_printf_i+0x15c>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	079b      	lsls	r3, r3, #30
 8005544:	d413      	bmi.n	800556e <_printf_i+0x22e>
 8005546:	68e0      	ldr	r0, [r4, #12]
 8005548:	9b03      	ldr	r3, [sp, #12]
 800554a:	4298      	cmp	r0, r3
 800554c:	bfb8      	it	lt
 800554e:	4618      	movlt	r0, r3
 8005550:	e7a6      	b.n	80054a0 <_printf_i+0x160>
 8005552:	2301      	movs	r3, #1
 8005554:	4632      	mov	r2, r6
 8005556:	4649      	mov	r1, r9
 8005558:	4640      	mov	r0, r8
 800555a:	47d0      	blx	sl
 800555c:	3001      	adds	r0, #1
 800555e:	d09d      	beq.n	800549c <_printf_i+0x15c>
 8005560:	3501      	adds	r5, #1
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	9903      	ldr	r1, [sp, #12]
 8005566:	1a5b      	subs	r3, r3, r1
 8005568:	42ab      	cmp	r3, r5
 800556a:	dcf2      	bgt.n	8005552 <_printf_i+0x212>
 800556c:	e7eb      	b.n	8005546 <_printf_i+0x206>
 800556e:	2500      	movs	r5, #0
 8005570:	f104 0619 	add.w	r6, r4, #25
 8005574:	e7f5      	b.n	8005562 <_printf_i+0x222>
 8005576:	bf00      	nop
 8005578:	080059d9 	.word	0x080059d9
 800557c:	080059ea 	.word	0x080059ea

08005580 <__sflush_r>:
 8005580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005588:	0716      	lsls	r6, r2, #28
 800558a:	4605      	mov	r5, r0
 800558c:	460c      	mov	r4, r1
 800558e:	d454      	bmi.n	800563a <__sflush_r+0xba>
 8005590:	684b      	ldr	r3, [r1, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	dc02      	bgt.n	800559c <__sflush_r+0x1c>
 8005596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	dd48      	ble.n	800562e <__sflush_r+0xae>
 800559c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800559e:	2e00      	cmp	r6, #0
 80055a0:	d045      	beq.n	800562e <__sflush_r+0xae>
 80055a2:	2300      	movs	r3, #0
 80055a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80055a8:	682f      	ldr	r7, [r5, #0]
 80055aa:	6a21      	ldr	r1, [r4, #32]
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	d030      	beq.n	8005612 <__sflush_r+0x92>
 80055b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	0759      	lsls	r1, r3, #29
 80055b6:	d505      	bpl.n	80055c4 <__sflush_r+0x44>
 80055b8:	6863      	ldr	r3, [r4, #4]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055be:	b10b      	cbz	r3, 80055c4 <__sflush_r+0x44>
 80055c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055c8:	6a21      	ldr	r1, [r4, #32]
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b0      	blx	r6
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	d106      	bne.n	80055e2 <__sflush_r+0x62>
 80055d4:	6829      	ldr	r1, [r5, #0]
 80055d6:	291d      	cmp	r1, #29
 80055d8:	d82b      	bhi.n	8005632 <__sflush_r+0xb2>
 80055da:	4a2a      	ldr	r2, [pc, #168]	@ (8005684 <__sflush_r+0x104>)
 80055dc:	410a      	asrs	r2, r1
 80055de:	07d6      	lsls	r6, r2, #31
 80055e0:	d427      	bmi.n	8005632 <__sflush_r+0xb2>
 80055e2:	2200      	movs	r2, #0
 80055e4:	6062      	str	r2, [r4, #4]
 80055e6:	04d9      	lsls	r1, r3, #19
 80055e8:	6922      	ldr	r2, [r4, #16]
 80055ea:	6022      	str	r2, [r4, #0]
 80055ec:	d504      	bpl.n	80055f8 <__sflush_r+0x78>
 80055ee:	1c42      	adds	r2, r0, #1
 80055f0:	d101      	bne.n	80055f6 <__sflush_r+0x76>
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	b903      	cbnz	r3, 80055f8 <__sflush_r+0x78>
 80055f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80055f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055fa:	602f      	str	r7, [r5, #0]
 80055fc:	b1b9      	cbz	r1, 800562e <__sflush_r+0xae>
 80055fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005602:	4299      	cmp	r1, r3
 8005604:	d002      	beq.n	800560c <__sflush_r+0x8c>
 8005606:	4628      	mov	r0, r5
 8005608:	f7ff fbf2 	bl	8004df0 <_free_r>
 800560c:	2300      	movs	r3, #0
 800560e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005610:	e00d      	b.n	800562e <__sflush_r+0xae>
 8005612:	2301      	movs	r3, #1
 8005614:	4628      	mov	r0, r5
 8005616:	47b0      	blx	r6
 8005618:	4602      	mov	r2, r0
 800561a:	1c50      	adds	r0, r2, #1
 800561c:	d1c9      	bne.n	80055b2 <__sflush_r+0x32>
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0c6      	beq.n	80055b2 <__sflush_r+0x32>
 8005624:	2b1d      	cmp	r3, #29
 8005626:	d001      	beq.n	800562c <__sflush_r+0xac>
 8005628:	2b16      	cmp	r3, #22
 800562a:	d11e      	bne.n	800566a <__sflush_r+0xea>
 800562c:	602f      	str	r7, [r5, #0]
 800562e:	2000      	movs	r0, #0
 8005630:	e022      	b.n	8005678 <__sflush_r+0xf8>
 8005632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005636:	b21b      	sxth	r3, r3
 8005638:	e01b      	b.n	8005672 <__sflush_r+0xf2>
 800563a:	690f      	ldr	r7, [r1, #16]
 800563c:	2f00      	cmp	r7, #0
 800563e:	d0f6      	beq.n	800562e <__sflush_r+0xae>
 8005640:	0793      	lsls	r3, r2, #30
 8005642:	680e      	ldr	r6, [r1, #0]
 8005644:	bf08      	it	eq
 8005646:	694b      	ldreq	r3, [r1, #20]
 8005648:	600f      	str	r7, [r1, #0]
 800564a:	bf18      	it	ne
 800564c:	2300      	movne	r3, #0
 800564e:	eba6 0807 	sub.w	r8, r6, r7
 8005652:	608b      	str	r3, [r1, #8]
 8005654:	f1b8 0f00 	cmp.w	r8, #0
 8005658:	dde9      	ble.n	800562e <__sflush_r+0xae>
 800565a:	6a21      	ldr	r1, [r4, #32]
 800565c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800565e:	4643      	mov	r3, r8
 8005660:	463a      	mov	r2, r7
 8005662:	4628      	mov	r0, r5
 8005664:	47b0      	blx	r6
 8005666:	2800      	cmp	r0, #0
 8005668:	dc08      	bgt.n	800567c <__sflush_r+0xfc>
 800566a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567c:	4407      	add	r7, r0
 800567e:	eba8 0800 	sub.w	r8, r8, r0
 8005682:	e7e7      	b.n	8005654 <__sflush_r+0xd4>
 8005684:	dfbffffe 	.word	0xdfbffffe

08005688 <_fflush_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	690b      	ldr	r3, [r1, #16]
 800568c:	4605      	mov	r5, r0
 800568e:	460c      	mov	r4, r1
 8005690:	b913      	cbnz	r3, 8005698 <_fflush_r+0x10>
 8005692:	2500      	movs	r5, #0
 8005694:	4628      	mov	r0, r5
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	b118      	cbz	r0, 80056a2 <_fflush_r+0x1a>
 800569a:	6a03      	ldr	r3, [r0, #32]
 800569c:	b90b      	cbnz	r3, 80056a2 <_fflush_r+0x1a>
 800569e:	f7ff fa9f 	bl	8004be0 <__sinit>
 80056a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f3      	beq.n	8005692 <_fflush_r+0xa>
 80056aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056ac:	07d0      	lsls	r0, r2, #31
 80056ae:	d404      	bmi.n	80056ba <_fflush_r+0x32>
 80056b0:	0599      	lsls	r1, r3, #22
 80056b2:	d402      	bmi.n	80056ba <_fflush_r+0x32>
 80056b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056b6:	f7ff fb98 	bl	8004dea <__retarget_lock_acquire_recursive>
 80056ba:	4628      	mov	r0, r5
 80056bc:	4621      	mov	r1, r4
 80056be:	f7ff ff5f 	bl	8005580 <__sflush_r>
 80056c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056c4:	07da      	lsls	r2, r3, #31
 80056c6:	4605      	mov	r5, r0
 80056c8:	d4e4      	bmi.n	8005694 <_fflush_r+0xc>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	059b      	lsls	r3, r3, #22
 80056ce:	d4e1      	bmi.n	8005694 <_fflush_r+0xc>
 80056d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056d2:	f7ff fb8b 	bl	8004dec <__retarget_lock_release_recursive>
 80056d6:	e7dd      	b.n	8005694 <_fflush_r+0xc>

080056d8 <__swbuf_r>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	460e      	mov	r6, r1
 80056dc:	4614      	mov	r4, r2
 80056de:	4605      	mov	r5, r0
 80056e0:	b118      	cbz	r0, 80056ea <__swbuf_r+0x12>
 80056e2:	6a03      	ldr	r3, [r0, #32]
 80056e4:	b90b      	cbnz	r3, 80056ea <__swbuf_r+0x12>
 80056e6:	f7ff fa7b 	bl	8004be0 <__sinit>
 80056ea:	69a3      	ldr	r3, [r4, #24]
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	071a      	lsls	r2, r3, #28
 80056f2:	d501      	bpl.n	80056f8 <__swbuf_r+0x20>
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b943      	cbnz	r3, 800570a <__swbuf_r+0x32>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f82a 	bl	8005754 <__swsetup_r>
 8005700:	b118      	cbz	r0, 800570a <__swbuf_r+0x32>
 8005702:	f04f 37ff 	mov.w	r7, #4294967295
 8005706:	4638      	mov	r0, r7
 8005708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	6922      	ldr	r2, [r4, #16]
 800570e:	1a98      	subs	r0, r3, r2
 8005710:	6963      	ldr	r3, [r4, #20]
 8005712:	b2f6      	uxtb	r6, r6
 8005714:	4283      	cmp	r3, r0
 8005716:	4637      	mov	r7, r6
 8005718:	dc05      	bgt.n	8005726 <__swbuf_r+0x4e>
 800571a:	4621      	mov	r1, r4
 800571c:	4628      	mov	r0, r5
 800571e:	f7ff ffb3 	bl	8005688 <_fflush_r>
 8005722:	2800      	cmp	r0, #0
 8005724:	d1ed      	bne.n	8005702 <__swbuf_r+0x2a>
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	3b01      	subs	r3, #1
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	6022      	str	r2, [r4, #0]
 8005732:	701e      	strb	r6, [r3, #0]
 8005734:	6962      	ldr	r2, [r4, #20]
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	429a      	cmp	r2, r3
 800573a:	d004      	beq.n	8005746 <__swbuf_r+0x6e>
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	07db      	lsls	r3, r3, #31
 8005740:	d5e1      	bpl.n	8005706 <__swbuf_r+0x2e>
 8005742:	2e0a      	cmp	r6, #10
 8005744:	d1df      	bne.n	8005706 <__swbuf_r+0x2e>
 8005746:	4621      	mov	r1, r4
 8005748:	4628      	mov	r0, r5
 800574a:	f7ff ff9d 	bl	8005688 <_fflush_r>
 800574e:	2800      	cmp	r0, #0
 8005750:	d0d9      	beq.n	8005706 <__swbuf_r+0x2e>
 8005752:	e7d6      	b.n	8005702 <__swbuf_r+0x2a>

08005754 <__swsetup_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4b29      	ldr	r3, [pc, #164]	@ (80057fc <__swsetup_r+0xa8>)
 8005758:	4605      	mov	r5, r0
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	460c      	mov	r4, r1
 800575e:	b118      	cbz	r0, 8005768 <__swsetup_r+0x14>
 8005760:	6a03      	ldr	r3, [r0, #32]
 8005762:	b90b      	cbnz	r3, 8005768 <__swsetup_r+0x14>
 8005764:	f7ff fa3c 	bl	8004be0 <__sinit>
 8005768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576c:	0719      	lsls	r1, r3, #28
 800576e:	d422      	bmi.n	80057b6 <__swsetup_r+0x62>
 8005770:	06da      	lsls	r2, r3, #27
 8005772:	d407      	bmi.n	8005784 <__swsetup_r+0x30>
 8005774:	2209      	movs	r2, #9
 8005776:	602a      	str	r2, [r5, #0]
 8005778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	e033      	b.n	80057ec <__swsetup_r+0x98>
 8005784:	0758      	lsls	r0, r3, #29
 8005786:	d512      	bpl.n	80057ae <__swsetup_r+0x5a>
 8005788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800578a:	b141      	cbz	r1, 800579e <__swsetup_r+0x4a>
 800578c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005790:	4299      	cmp	r1, r3
 8005792:	d002      	beq.n	800579a <__swsetup_r+0x46>
 8005794:	4628      	mov	r0, r5
 8005796:	f7ff fb2b 	bl	8004df0 <_free_r>
 800579a:	2300      	movs	r3, #0
 800579c:	6363      	str	r3, [r4, #52]	@ 0x34
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	2300      	movs	r3, #0
 80057a8:	6063      	str	r3, [r4, #4]
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f043 0308 	orr.w	r3, r3, #8
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	b94b      	cbnz	r3, 80057ce <__swsetup_r+0x7a>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c4:	d003      	beq.n	80057ce <__swsetup_r+0x7a>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 f84f 	bl	800586c <__smakebuf_r>
 80057ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d2:	f013 0201 	ands.w	r2, r3, #1
 80057d6:	d00a      	beq.n	80057ee <__swsetup_r+0x9a>
 80057d8:	2200      	movs	r2, #0
 80057da:	60a2      	str	r2, [r4, #8]
 80057dc:	6962      	ldr	r2, [r4, #20]
 80057de:	4252      	negs	r2, r2
 80057e0:	61a2      	str	r2, [r4, #24]
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	b942      	cbnz	r2, 80057f8 <__swsetup_r+0xa4>
 80057e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057ea:	d1c5      	bne.n	8005778 <__swsetup_r+0x24>
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	0799      	lsls	r1, r3, #30
 80057f0:	bf58      	it	pl
 80057f2:	6962      	ldrpl	r2, [r4, #20]
 80057f4:	60a2      	str	r2, [r4, #8]
 80057f6:	e7f4      	b.n	80057e2 <__swsetup_r+0x8e>
 80057f8:	2000      	movs	r0, #0
 80057fa:	e7f7      	b.n	80057ec <__swsetup_r+0x98>
 80057fc:	20000018 	.word	0x20000018

08005800 <_sbrk_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d06      	ldr	r5, [pc, #24]	@ (800581c <_sbrk_r+0x1c>)
 8005804:	2300      	movs	r3, #0
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	f7fb fe42 	bl	8001494 <_sbrk>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_sbrk_r+0x1a>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_sbrk_r+0x1a>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	20000420 	.word	0x20000420

08005820 <__swhatbuf_r>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	460c      	mov	r4, r1
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	2900      	cmp	r1, #0
 800582a:	b096      	sub	sp, #88	@ 0x58
 800582c:	4615      	mov	r5, r2
 800582e:	461e      	mov	r6, r3
 8005830:	da0d      	bge.n	800584e <__swhatbuf_r+0x2e>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	bf14      	ite	ne
 800583e:	2340      	movne	r3, #64	@ 0x40
 8005840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005844:	2000      	movs	r0, #0
 8005846:	6031      	str	r1, [r6, #0]
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	b016      	add	sp, #88	@ 0x58
 800584c:	bd70      	pop	{r4, r5, r6, pc}
 800584e:	466a      	mov	r2, sp
 8005850:	f000 f848 	bl	80058e4 <_fstat_r>
 8005854:	2800      	cmp	r0, #0
 8005856:	dbec      	blt.n	8005832 <__swhatbuf_r+0x12>
 8005858:	9901      	ldr	r1, [sp, #4]
 800585a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800585e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005862:	4259      	negs	r1, r3
 8005864:	4159      	adcs	r1, r3
 8005866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800586a:	e7eb      	b.n	8005844 <__swhatbuf_r+0x24>

0800586c <__smakebuf_r>:
 800586c:	898b      	ldrh	r3, [r1, #12]
 800586e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005870:	079d      	lsls	r5, r3, #30
 8005872:	4606      	mov	r6, r0
 8005874:	460c      	mov	r4, r1
 8005876:	d507      	bpl.n	8005888 <__smakebuf_r+0x1c>
 8005878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2301      	movs	r3, #1
 8005882:	6163      	str	r3, [r4, #20]
 8005884:	b003      	add	sp, #12
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	ab01      	add	r3, sp, #4
 800588a:	466a      	mov	r2, sp
 800588c:	f7ff ffc8 	bl	8005820 <__swhatbuf_r>
 8005890:	9f00      	ldr	r7, [sp, #0]
 8005892:	4605      	mov	r5, r0
 8005894:	4639      	mov	r1, r7
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff fb16 	bl	8004ec8 <_malloc_r>
 800589c:	b948      	cbnz	r0, 80058b2 <__smakebuf_r+0x46>
 800589e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a2:	059a      	lsls	r2, r3, #22
 80058a4:	d4ee      	bmi.n	8005884 <__smakebuf_r+0x18>
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	f043 0302 	orr.w	r3, r3, #2
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	e7e2      	b.n	8005878 <__smakebuf_r+0xc>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	6020      	str	r0, [r4, #0]
 80058b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	9b01      	ldr	r3, [sp, #4]
 80058be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058c2:	b15b      	cbz	r3, 80058dc <__smakebuf_r+0x70>
 80058c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c8:	4630      	mov	r0, r6
 80058ca:	f000 f81d 	bl	8005908 <_isatty_r>
 80058ce:	b128      	cbz	r0, 80058dc <__smakebuf_r+0x70>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	431d      	orrs	r5, r3
 80058e0:	81a5      	strh	r5, [r4, #12]
 80058e2:	e7cf      	b.n	8005884 <__smakebuf_r+0x18>

080058e4 <_fstat_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d07      	ldr	r5, [pc, #28]	@ (8005904 <_fstat_r+0x20>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	f7fb fda6 	bl	8001442 <_fstat>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d102      	bne.n	8005900 <_fstat_r+0x1c>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	b103      	cbz	r3, 8005900 <_fstat_r+0x1c>
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	bd38      	pop	{r3, r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	20000420 	.word	0x20000420

08005908 <_isatty_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d06      	ldr	r5, [pc, #24]	@ (8005924 <_isatty_r+0x1c>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fb fda5 	bl	8001462 <_isatty>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_isatty_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_isatty_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000420 	.word	0x20000420

08005928 <_init>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	bf00      	nop
 800592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592e:	bc08      	pop	{r3}
 8005930:	469e      	mov	lr, r3
 8005932:	4770      	bx	lr

08005934 <_fini>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr
